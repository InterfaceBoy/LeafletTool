{"remainingRequest":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/grid/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/grid/src/views/Home.vue","mtime":1586942496847},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/babel-loader/lib/index.js","mtime":1586942665794},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js","mtime":1573543948284}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport ExponentialModule from \"@/components/exponentialModule.vue\";\nimport CircleRing from \"@/components/circleRing.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport Portal from \"@/components/Portal.vue\";\n\n// eslint-disable-next-line\nimport EventBus from \"../utils/EventBus\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    IEcharts,\n    ExponentialModule,\n    CircleRing,\n    bottomMap,\n    headerNavigation,\n    Portal\n  },\n  data() {\n    return {\n      explainIsShow: true, // 是否显示全区指标说明按钮\n      nowIndexId: \"\", //当前点击的id,用于柱状图事件切换数据\n      baseUrl: process.env.BASE_URL,\n      listLeftData: \"\",\n      listRightData: \"\",\n      timeData: [[\"2018-1-1\", 0], [\"2018-12-31\", 350], 1], // 时间数据数组,三级联动和折线图\n      allDistrictData: \"\", // 全区的所有时间指标数据\n      allDistrictAlertValue: \"\", // 全区的预警值\n      alertValue: 0.1, // 预警线的值\n      dateList: \"\", // echartsX坐标的时间\n      oneDaySpan: 0, // 时间对应的下标\n      allEvluations: [\n        // 所有指标数据,初始化\n        {}\n      ],\n      prevPercentValue: \"\",\n      oneDaySpanMax: 364, // 时间数组的长度\n      isShowMapModal: false, // 是否显示地图渲染层\n      mapTabList: [\"街道\", \"社区\", \"基础网格\"],\n      clickedTabItem: \"街道\", // 当前被点击的tabItem,\n      gridType: \"street\",\n      gridsAlert: [], // 网格的数据,名称和值\n      totalValueByDate: [], // 所有属性按时间分类的街道数据\n      indexValueByDate: [], // 筛选后的属性按时间分类的指定时间的街道数据\n      streetsGeoJson: {}, // 街道的geojson\n      streetsData: {}, // 传递给地图的geojson\n      indexAlertData: [], // 每个属性的专属值\n      // 属性的临界值\n      criticalValue1: \"\", // 临界值1\n      criticalValue2: \"\", // 临界值2\n      criticalValue3: \"\", // 临界值3\n      explainJudge: \"\", // 临界值判断条件\n      allDistrictAlert: {}, // 全区对应的预警值\n      allDistrictExpain: {}, // 全区对应的说明\n      isShowChart: true,\n      streetRanking: [], //全区指数对应的街道排名\n      alertJudge: \"\",\n      MapModalParams: \"\"\n    };\n  },\n  created() {\n    // this.queryStreetsData();\n    this.queryAllIndexAlertData();\n    this.queryAllIndexValue().then(() => {\n      this.queryAllIndexValueByDate();\n    });\n  },\n  computed: {\n    // 折线图\n    line() {\n      let color = \"\";\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n      let pieces = [{ gt: 0, lt: 1 }];\n      if (this.alertJudge === \"low\") {\n        pieces = [{ gte: 0, lt: Number(this.alertValue), color: \"red\" }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{ gte: Number(this.alertValue), lt: 100, color: \"red\" }];\n      } else {\n        pieces = [{ gt: 0, lt: 1 }];\n      }\n      let data = this.timeData;\n      let dateList = data.map(function(item) {\n        return item[0];\n      });\n      /* eslint-disable */\n      this.dateList = dateList;\n      let valueList = data.map(function(item) {\n        return item[1];\n      });\n      let option = {\n        // Make gradient line here\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n\n        title: [\n          {\n            top: \"55%\",\n            left: \"center\",\n            text: \"\"\n          }\n        ],\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\"\n          },\n          formatter: function(params) {\n            const date = params[0].axisValue;\n            const color = params[0].color;\n            const data = params[0].data;\n            const year = date.slice(0, 4);\n            const month = date.slice(4, 6);\n            const day = date.slice(6, 8);\n            return `${year}年${month}月${day}日</br><span style=\"background:${color};border-radius:50%;width:10px;height:10px;display:inline-block\"></span>&nbsp;${data}\n          `;\n          }\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: dateList,\n            gridIndex: 1,\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        yAxis: [\n          {\n            splitLine: { show: false },\n            gridIndex: 1,\n            scale: true,\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: { type: [\"line\", \"bar\"] }\n          },\n          right: \"3%\"\n        },\n        grid: [\n          {\n            bottom: \"10%\",\n            top: \"1%\",\n            // right: \"25%\",\n            containLabel: true\n          },\n          {\n            x: \"5%\",\n            y: \"5%\",\n            x2: \"7%\",\n            y2: \"10%\"\n          },\n          {\n            height: \"100%\"\n          }\n        ],\n        dataZoom: [\n          {\n            type: \"slider\", //图表下方的伸缩条\n            show: false, //是否显示\n            realtime: true, //\n            start: 0, //伸缩条开始位置（1-100），可以随时更改\n            end: 100 //伸缩条结束位置（1-100），可以随时更改\n          },\n          {\n            type: \"inside\", //鼠标滚轮\n            realtime: true\n          }\n        ],\n        series: [\n          {\n            type: \"line\",\n            showSymbol: true,\n            data: valueList,\n            itemStyle: {\n              normal: {\n                color: params => {\n                  if (this.explainJudge === \"forward\") {\n                    return \"#D24A53\";\n                  } else {\n                    return \"#FFD6A0\";\n                  }\n                },\n                lineStyle: {\n                  // color: color\n                }\n              }\n            },\n            markLine: {\n              symbol: \"none\",\n              precision: 2,\n              silent: true,\n              itemStyle: {\n                normal: {}\n              },\n              data: [\n                {\n                  type: \"average\",\n                  name: \"平均值\",\n                  lineStyle: {\n                    color: \"#3FFCFD\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                },\n                {\n                  name: \"预警线\",\n                  yAxis: this.alertValue,\n                  lineStyle: {\n                    color: \"#F92E2A\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      };\n      return option;\n    },\n    // 全街道柱状图\n    bar() {\n      const data = this.streetRanking;\n      let dataX = data.map(item => {\n        return item[0];\n      });\n      let dataY = data.map(item => {\n        return item[1];\n      });\n      let endPercent = 100;\n      if (this.gridType === \"street\") {\n        endPercent = 100;\n      } else {\n        endPercent = (30 / dataX.length) * 100;\n      }\n      let option = {\n        // visualMap: [\n        //   {\n        //     show: false,\n        //     type: \"continuous\",\n        //     seriesIndex: 0,\n        //     dimension: 0,\n        //     min: 0,\n        //     max: 10\n        //   }\n        // ],\n        color: \"#78B1DD\",\n        tooltip: {\n          trigger: \"axis\"\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: { type: [\"line\", \"bar\"] },\n            onClick: function() {\n              console.log(111);\n            }\n          },\n          right: \"3%\"\n        },\n        dataZoom: [\n          //给x轴设置滚动条\n          {\n            start: 0, //默认为0\n            end: endPercent,\n            type: \"slider\",\n            show: false,\n            handleSize: 0, //滑动条的 左右2个滑动条的大小\n            backgroundColor: \"#ddd\", //两边未选中的滑动条区域的颜色\n            showDataShadow: false, //是否显示数据阴影 默认auto\n            showDetail: false //即拖拽时候是否显示详细数值信息 默认true\n          },\n          //下面这个属性是里面拖到\n          {\n            type: \"inside\",\n            show: false,\n            start: 0, //默认为1\n            end: 100\n          }\n        ],\n        grid: [\n          {\n            bottom: \"10%\",\n            top: \"10%\",\n            left: \"4%\",\n            right: \"2%\"\n          }\n        ],\n        xAxis: [\n          {\n            type: \"category\",\n            triggerEvent: true,\n            data: dataX,\n            axisLine: {\n              color: \"#fff\"\n            },\n\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              },\n              interval: 0\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            splitLine: { show: false },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        series: [\n          {\n            name: \"街道\",\n            type: \"bar\",\n            data: dataY\n          }\n        ]\n      };\n      return option;\n    },\n    // 圆环中心的值\n    percentValue() {\n      // 保证异步拿到数据后再渲染\n      if (this.allEvluations.length > 1) {\n        if (this.oneDaySpanMax >= 1) {\n          this.prevPercentValue = this.allEvluations[0].timeData[\n            this.oneDaySpanMax - 1\n          ].value.toFixed(2);\n        } else {\n          this.prevPercentValue = 1;\n        }\n        return this.allEvluations[0].timeData[this.oneDaySpanMax].value.toFixed(\n          2\n        );\n      }\n    },\n    // 目前系统的时间\n    currentDayDate() {\n      if (this.allEvluations.length > 1) {\n        return this.formatTime(\n          this.allEvluations[0].timeData[this.oneDaySpanMax].date\n        );\n      }\n    },\n    propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        alertValue: this.alertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexValue: \"\",\n        streetsData: this.indexValueByDate\n      };\n    }\n  },\n  mounted() {\n    this.getGridsAlert();\n  },\n  methods: {\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert() {\n      this.$http(`${this.baseUrl}/static/gridsAlerts.json`).then(result => {\n        for (let grids of result.data) {\n          grids[0] = \"网格\" + this.rn(1, 10);\n          grids[1] = this.rn(0, 15);\n        }\n        if (result.data) this.gridsAlert = result.data;\n      });\n    },\n    // 获取街道的geojson\n    // async queryStreetsData() {\n    //   const streetsGeoUrl = `${this.baseUrl}/static/streets.json`;\n    //   const res = await this.$http.get(streetsGeoUrl);\n    //   this.streetsGeoJson = res.data;\n    // },\n    // 获取所有属性的专属特性-临界值\n    async queryAllIndexAlertData() {\n      const indexAlertDataUrl = `${this.baseUrl}/static/indexAlertValue.json`;\n      const res = await this.$http.get(indexAlertDataUrl);\n      this.indexAlertData = res.data;\n    },\n    // 获取所有指标对应每天的所有街道的数据\n    async queryAllIndexValueByDate() {\n      let indexValueUrl = \"\";\n      if (this.gridType === \"street\") {\n        indexValueUrl = `${this.baseUrl}/static/indexvalue.json`;\n      } else if (this.gridType === \"community\") {\n        indexValueUrl = `${this.baseUrl}/static/communityValue.json`;\n      } else if (this.gridType === \"grid\") {\n        indexValueUrl = `${this.baseUrl}/static/communityValue.json`;\n      }\n      const res = await this.$http.get(indexValueUrl);\n      this.totalValueByDate = res.data;\n      // 进入全区的初次街道排名\n      const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n        .date;\n      let streetDataByDate = this.totalValueByDate\n        .filter(item => Number(item.date) === currentDate)\n        .filter(item => item.indexId === \"ZS\")[0];\n      // 计算街道排名\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    async queryAllIndexValue() {\n      const indexSystemUrl = `${this.baseUrl}/static/signsIndex.json`;\n      // 全区指标值\n      const indexEvaluation = `${this.baseUrl}/static/indexEvaluation.json`;\n      // 全区预警判断条件以及临界值\n      const districtAlertUrl = `${this.baseUrl}/static/districtAlertValue.json`;\n      // 全区评价说明解释\n      const districtExplainUrl = `${this.baseUrl}/static/districtExplain.json`;\n      let indexes = await this.$http.get(indexSystemUrl);\n      let evaluationData = await this.$http.get(indexEvaluation);\n      let districtAlertData = await this.$http.get(districtAlertUrl);\n      let districtExplainData = await this.$http.get(districtExplainUrl);\n      const allIndexes = indexes.data;\n      const allEvluations = evaluationData.data;\n      const allIndexesAlertValue = districtAlertData.data;\n      const districtExplainValue = districtExplainData.data;\n\n      if (indexes.status === 200 && evaluationData.status === 200) {\n        this.listLeftData = allIndexes.slice(0, 2).reverse();\n        this.listRightData = allIndexes.slice(-2);\n        // FIXME: 需要优化的地方 对系统时间的处理和全区最后一个值得处理\n        // 全区圆环所需要的数据\n        this.allDistrictData = allEvluations[0].timeData;\n        this.allDistrictAlert = allIndexesAlertValue.filter(\n          item => item.id === \"ZS\"\n        )[0];\n        this.allDistrictExpain = districtExplainValue.filter(\n          item => item.id === \"ZS\"\n        )[0];\n        // 进入系统后折线图显示全区的值\n        this.linkage(\n          allEvluations[0].timeData,\n          this.allDistrictAlert.alertValue,\n          this.allDistrictAlert.explainJudge,\n          this.allDistrictAlert.alertJudge\n        );\n        // 显示全区的街道排名\n        // 将每个指标对应的值放到对应的指标\n\n        allEvluations.forEach(item => {\n          for (let index = 0; index < allIndexes.length; index++) {\n            const firstLevelItem = allIndexes[index];\n            if (firstLevelItem.id === item.id) {\n              firstLevelItem.time = item.timeData;\n              // firstLevelItem.alertValue = item.alertValue;\n              // 添加判断是低于还是高于显示预警的判断\n              // if (firstLevelItem.id == \"ZS2\" || firstLevelItem.id == \"ZS3\") {\n              //   firstLevelItem.alertJudge = \"low\";\n              // } else {\n              //   firstLevelItem.alertJudge = \"high\";\n              // }\n              // 预警值以及临界值以及预警显示条件\n              for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                  // 预警值\n                  firstLevelItem.alertValue =\n                    allIndexesAlertValue[i].alertValue;\n                  firstLevelItem.alertJudge =\n                    // 预警显示条件\n                    allIndexesAlertValue[i].alertJudge;\n                  // 临界值1\n                  firstLevelItem.criticalValue1 =\n                    allIndexesAlertValue[i].criticalValue1;\n                  // 临界值2\n                  firstLevelItem.criticalValue2 =\n                    allIndexesAlertValue[i].criticalValue2;\n                  // 临界值3\n                  firstLevelItem.criticalValue3 =\n                    allIndexesAlertValue[i].criticalValue3;\n                  // 临界值判断条件\n                  firstLevelItem.explainJudge =\n                    allIndexesAlertValue[i].explainJudge;\n                  // 最大值\n                  firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue;\n                  // 最小值\n                  firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                }\n                // 评价说明\n                if (firstLevelItem.id === districtExplainValue[i].id) {\n                  firstLevelItem.meaning = districtExplainValue[i].meaning;\n                  firstLevelItem.mode = districtExplainValue[i].mode;\n                }\n              }\n              break;\n            } else {\n              if (item.id.indexOf(firstLevelItem.id) != -1) {\n                for (\n                  let secondIndex = 0;\n                  secondIndex < firstLevelItem.children.length;\n                  secondIndex++\n                ) {\n                  const secondLevelIndex = firstLevelItem.children[secondIndex];\n                  if (secondLevelIndex.id === item.id) {\n                    secondLevelIndex.time = item.timeData;\n                    for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                      if (secondLevelIndex.id === allIndexesAlertValue[i].id) {\n                        // 预警值\n                        secondLevelIndex.alertValue =\n                          allIndexesAlertValue[i].alertValue;\n                        secondLevelIndex.alertJudge =\n                          // 预警显示条件\n                          allIndexesAlertValue[i].alertJudge;\n                        // 临界值1\n                        secondLevelIndex.criticalValue1 =\n                          allIndexesAlertValue[i].criticalValue1;\n                        // 临界值2\n                        secondLevelIndex.criticalValue2 =\n                          allIndexesAlertValue[i].criticalValue2;\n                        // 临界值3\n                        secondLevelIndex.criticalValue3 =\n                          allIndexesAlertValue[i].criticalValue3;\n                        // 临界值判断条件\n                        secondLevelIndex.explainJudge =\n                          allIndexesAlertValue[i].explainJudge;\n                        // 最大值\n                        secondLevelIndex.maxValue =\n                          allIndexesAlertValue[i].maxValue;\n                        // 最小值\n                        secondLevelIndex.minValue =\n                          allIndexesAlertValue[i].minValue;\n                      }\n                      if (secondLevelIndex.id === districtExplainValue[i].id) {\n                        secondLevelIndex.meaning =\n                          districtExplainValue[i].meaning;\n                        secondLevelIndex.mode = districtExplainValue[i].mode;\n                      }\n                    }\n\n                    break;\n                  } else {\n                    for (\n                      let thirdIndex = 0;\n                      thirdIndex < secondLevelIndex.children.length;\n                      thirdIndex++\n                    ) {\n                      const thirdLevelIndex =\n                        secondLevelIndex.children[thirdIndex];\n                      if (thirdLevelIndex.id === item.id) {\n                        thirdLevelIndex.time = item.timeData;\n                        thirdLevelIndex.value = item.timeData[0].value;\n                        for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (\n                            thirdLevelIndex.id === allIndexesAlertValue[i].id\n                          ) {\n                            // 预警值\n                            thirdLevelIndex.alertValue =\n                              allIndexesAlertValue[i].alertValue;\n                            thirdLevelIndex.alertJudge =\n                              // 预警显示条件\n                              allIndexesAlertValue[i].alertJudge;\n                            // 临界值1\n                            thirdLevelIndex.criticalValue1 =\n                              allIndexesAlertValue[i].criticalValue1;\n                            // 临界值2\n                            thirdLevelIndex.criticalValue2 =\n                              allIndexesAlertValue[i].criticalValue2;\n                            // 临界值3\n                            thirdLevelIndex.criticalValue3 =\n                              allIndexesAlertValue[i].criticalValue3;\n                            // 临界值判断条件\n                            thirdLevelIndex.explainJudge =\n                              allIndexesAlertValue[i].explainJudge;\n                            // 最大值\n                            thirdLevelIndex.maxValue =\n                              allIndexesAlertValue[i].maxValue;\n                            // 最小值\n                            thirdLevelIndex.minValue =\n                              allIndexesAlertValue[i].minValue;\n                          }\n                          if (\n                            thirdLevelIndex.id === districtExplainValue[i].id\n                          ) {\n                            thirdLevelIndex.meaning =\n                              districtExplainValue[i].meaning;\n                            thirdLevelIndex.mode = districtExplainValue[i].mode;\n                          }\n                        }\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n        this.allEvluations = allEvluations;\n      } else {\n        this.$Message.error(\"数据请求失败\");\n      }\n    },\n\n    // echarts 根据时间的变化而数据变化\n    showDayData(event) {\n      // 当前点击的时间\n      let dayDate = event.name;\n      for (let i = 0; i < this.dateList.length; i++) {\n        if (dayDate === this.dateList[i].toString()) {\n          this.oneDaySpanMax = i;\n        }\n      }\n    },\n    // echarts 柱状图点击事件\n    showStreetPage(instance) {\n      let nextStreet = {};\n      let nextStreetName = instance.name || instance.value;\n      let nextStreetData = instance.data;\n      for (let key in this.$store.state.allStreetNameCode) {\n        if (nextStreetName === this.$store.state.allStreetNameCode[key]) {\n          nextStreet.gridId = key;\n          nextStreet.gridName = nextStreetName;\n        }\n      }\n      if (this.gridType === \"street\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"street\", nextStreet }\n        });\n      } else if (this.gridType === \"community\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"community\", nextStreet }\n        });\n      } else if (this.gridType === \"grid\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"grid\", nextStreet }\n        });\n      }\n    },\n    // 是否显示地图modal\n    handleMapModal(params) {\n      this.MapModalParams = params;\n      this.isShowMapModal = params.status;\n      // this.gridType = \"street\";\n      // this.clickedTabItem = \"街道\";\n      if (params.status) {\n        const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n          .date;\n        const indexId = params.data.id;\n        this.indexValueByDate = this.totalValueByDate\n          .filter(item => Number(item.date) === currentDate)\n          .filter(item => item.indexId === indexId)[0];\n        // this.streetsGeoJson.features.forEach((geoItem, index) => {\n        //   geoItem.properties.gridValue = mapData[geoItem.properties.jdcode];\n        // });\n        // 获取当前属性的临界值\n        const indexAlertValue = this.indexAlertData.filter(\n          item => item.id === indexId\n        )[0];\n        this.criticalValue1 = indexAlertValue.criticalValue1;\n        this.criticalValue2 = indexAlertValue.criticalValue2;\n        this.criticalValue3 = indexAlertValue.criticalValue3;\n        this.alertValue = indexAlertValue.alertValue;\n        this.alertJudge = indexAlertValue.alertJudge;\n        this.explainJudge = indexAlertValue.explainJudge;\n      }\n    },\n    // 显示折线图\n    linkage(timeData, alertValue, explainJudge, alertJudge) {\n      this.alertValue = alertValue;\n      this.explainJudge = explainJudge;\n      this.alertJudge = alertJudge;\n      const timeArr = []; // 时间数组\n      const timeValue = []; // 每个时间对应的数据\n      timeData.map(function(item) {\n        timeArr.push(item.date);\n        timeValue.push(item.value);\n      });\n      // 转换为二维数组\n      this.timeData = timeArr.map((key, value) => [key, timeValue[value]]);\n    },\n    // 显示柱状图\n    showBarStreet(indexId) {\n      this.nowIndexId = indexId;\n      // 根据事件和id获取对应的街道的值\n      const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n        .date;\n      let streetDataByDate = this.totalValueByDate\n        .filter(item => Number(item.date) === currentDate)\n        .filter(item => item.indexId === indexId)[0];\n      // 计算街道排名\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    // 计算排名\n    computeValue(indexValueItem) {\n      const streetName = [];\n      const streetValue = [];\n      const checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n      for (let key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n      let rankingData = streetName.map((key, index) => {\n        return [key, streetValue[index]];\n      });\n      // 计算排名\n      let mapped = rankingData.map(function(ar, i) {\n        return { value: ar[1], index: i }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function(a, b) {\n        return b.value - a.value;\n      });\n      // 将三个undefined转换为对应的字段\n      let result = mapped.map(function(key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (\n            rankingData[key.index][1].toString().indexOf(\".\") == -1 &&\n            rankingData[key.index][1].length == 8\n          ) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n        return rankingData[key.index];\n      });\n      // 计算排名保留\n      let indexRanking = [];\n      result.map(key => {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    },\n    // 显示一级指标高亮\n    showActiveFrist() {\n      this.$store.state.indicatorIndex = \"一\";\n      // 清空当前界面上的高亮效果\n      this.$store.state.leftExponentail.currentFirstLevel = \"\";\n      this.$store.state.leftExponentail.currentSecondLevel = \"\";\n      this.$store.state.leftExponentail.currenThridLevel = \"\";\n      this.$store.state.rightExponentail.currentFirstLevel = \"\";\n      this.$store.state.rightExponentail.currentSecondLevel = \"\";\n      this.$store.state.rightExponentail.currenThridLevel = \"\";\n    },\n    // 格式化时间\n    formatTime(time) {\n      time = time.toString();\n      time =\n        time.slice(0, 4) +\n        \"年\" +\n        time.slice(4, 6) +\n        \"月\" +\n        time.slice(6, 8) +\n        \"日\";\n      return time;\n    },\n    //返回指定范围随机数\n    rn(min, max) {\n      var n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    handleMapTab(item) {\n      this.clickedTabItem = item;\n      switch (item) {\n        case \"街道\":\n          this.gridType = \"street\";\n          break;\n        case \"社区\":\n          this.gridType = \"community\";\n          break;\n        case \"基础网格\":\n          this.gridType = \"grid\";\n          break;\n        default:\n      }\n    }\n  },\n  mounted() {\n    // 将组件保存到vuex中\n    this.$store.state.leftExponentail = this.$refs.leftExponentail;\n    this.$store.state.rightExponentail = this.$refs.rightExponentail;\n  },\n  watch: {\n    oneDaySpanMax() {\n      this.showBarStreet(this.nowIndexId);\n    },\n    gridType() {\n      this.queryAllIndexValueByDate().then(() => {\n        this.handleMapModal(this.MapModalParams);\n      });\n    }\n  }\n};\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home\">\n    <!-- 浮动层 -->\n    <!-- 浮动层 -->\n    <div class=\"floating-layer\">\n      <!-- 中间内容 -->\n      <!-- 指标总览 -->\n      <div class=\"evaluation-nav\">\n        <span class=\"nav\">指标总览</span>\n        <p>\n          <span class=\"color-good\">健康</span>\n        </p>\n        <p>\n          <span class=\"color-notgood\">良好</span>\n        </p>\n        <p>\n          <span class=\"color-general\">一般</span>\n        </p>\n        <p>\n          <span class=\"color-risk\">可能存在风险</span>\n        </p>\n        <p>\n          <span class=\"color-alert\">预警</span>\n        </p>\n      </div>\n      <div class=\"assess\">\n        <div class=\"assess-content\">\n          <div class=\"a-left\">\n            <ExponentialModule\n              ref=\"leftExponentail\"\n              :listData=\"listLeftData\"\n              :state=\"0\"\n              :oneDaySpanMax=\"oneDaySpanMax\"\n              @showMapModal=\"handleMapModal\"\n              @showBarStreet=\"showBarStreet\"\n              @linkage=\"linkage\"\n            ></ExponentialModule>\n          </div>\n          <div class=\"a-center\">\n            <div class=\"time\">\n              <!-- <span class=\"timer-icon\"></span> -->\n              <span>{{currentDayDate}}</span>\n            </div>\n            <!-- 圆环组件 -->\n            <CircleRing\n              :percent=\"percentValue\"\n              :prevPercentValue=\"prevPercentValue\"\n              :allDistrictAlert=\"allDistrictAlert\"\n              :allDistrictExpain=\"allDistrictExpain\"\n              :explainIsShow=\"explainIsShow\"\n            ></CircleRing>\n            <div class=\"number\">\n              <div\n                class=\"number-text\"\n                @mouseover=\"explainIsShow=true\"\n                @click=\"linkage(allDistrictData,allDistrictAlert.alertValue,allDistrictAlert.explainJudge,allDistrictAlert.alertJudge);showActiveFrist();showBarStreet('ZS')\"\n              >网格运行指数</div>\n            </div>\n          </div>\n          <div class=\"a-right\">\n            <ExponentialModule\n              ref=\"rightExponentail\"\n              :listData=\"listRightData\"\n              :state=\"1\"\n              :oneDaySpanMax=\"oneDaySpanMax\"\n              @showMapModal=\"handleMapModal\"\n              @showBarStreet=\"showBarStreet\"\n              @linkage=\"linkage\"\n            ></ExponentialModule>\n          </div>\n        </div>\n      </div>\n      <!-- 折线图 -->\n      <div class=\"broken-line\">\n        <div class=\"line-title\">\n          <span\n            class=\"title-left\"\n            :class=\"{isSelected:isShowChart}\"\n            @click=\"isShowChart = true\"\n          >{{clickedTabItem}}综合排名</span>&nbsp;\n          <span\n            class=\"title-left\"\n            :class=\"{isSelected:!isShowChart}\"\n            @click=\"isShowChart = false\"\n          >全区综合评价值</span>\n          <span class=\"title-right arrow-yellow-up\">{{this.$store.state.indicatorIndex}}级指标</span>\n        </div>\n        <div class=\"line-echarts\" v-show=\"isShowChart\">\n          <IEcharts :option=\"bar\" :resizable=\"true\" :notMerge=\"true\" @click=\"showStreetPage\"></IEcharts>\n        </div>\n        <div class=\"line-echarts\" v-show=\"!isShowChart\">\n          <IEcharts :option=\"line\" :resizable=\"true\" :notMerge=\"true\" @click=\"showDayData\"></IEcharts>\n        </div>\n      </div>\n    </div>\n    <!-- 地图数据渲染层 -->\n    <div class=\"map-modal\" v-if=\"isShowMapModal\">\n      <Icon\n        class=\"close-icon\"\n        type=\"md-close-circle\"\n        size=\"20\"\n        @click=\"handleMapModal({status:false, data:{}})\"\n      />\n      <div class=\"map-container\">\n        <div class=\"container-header\">\n          <div\n            class=\"tab-item\"\n            v-for=\"(tabItem, index) in mapTabList\"\n            :key=\"index\"\n            :class=\"{'tab-active':clickedTabItem === tabItem}\"\n            @click=\"handleMapTab(tabItem)\"\n          >{{tabItem}}</div>\n        </div>\n        <div class=\"container-main\">\n          <bottomMap\n            ref=\"mapNode\"\n            :gridType=\"gridType\"\n            :gridsAlert=\"gridsAlert\"\n            :propsConfig=\"propsConfig\"\n          ></bottomMap>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport ExponentialModule from \"@/components/exponentialModule.vue\";\nimport CircleRing from \"@/components/circleRing.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport Portal from \"@/components/Portal.vue\";\n\n// eslint-disable-next-line\nimport EventBus from \"../utils/EventBus\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    IEcharts,\n    ExponentialModule,\n    CircleRing,\n    bottomMap,\n    headerNavigation,\n    Portal\n  },\n  data() {\n    return {\n      explainIsShow: true, // 是否显示全区指标说明按钮\n      nowIndexId: \"\", //当前点击的id,用于柱状图事件切换数据\n      baseUrl: process.env.BASE_URL,\n      listLeftData: \"\",\n      listRightData: \"\",\n      timeData: [[\"2018-1-1\", 0], [\"2018-12-31\", 350], 1], // 时间数据数组,三级联动和折线图\n      allDistrictData: \"\", // 全区的所有时间指标数据\n      allDistrictAlertValue: \"\", // 全区的预警值\n      alertValue: 0.1, // 预警线的值\n      dateList: \"\", // echartsX坐标的时间\n      oneDaySpan: 0, // 时间对应的下标\n      allEvluations: [\n        // 所有指标数据,初始化\n        {}\n      ],\n      prevPercentValue: \"\",\n      oneDaySpanMax: 364, // 时间数组的长度\n      isShowMapModal: false, // 是否显示地图渲染层\n      mapTabList: [\"街道\", \"社区\", \"基础网格\"],\n      clickedTabItem: \"街道\", // 当前被点击的tabItem,\n      gridType: \"street\",\n      gridsAlert: [], // 网格的数据,名称和值\n      totalValueByDate: [], // 所有属性按时间分类的街道数据\n      indexValueByDate: [], // 筛选后的属性按时间分类的指定时间的街道数据\n      streetsGeoJson: {}, // 街道的geojson\n      streetsData: {}, // 传递给地图的geojson\n      indexAlertData: [], // 每个属性的专属值\n      // 属性的临界值\n      criticalValue1: \"\", // 临界值1\n      criticalValue2: \"\", // 临界值2\n      criticalValue3: \"\", // 临界值3\n      explainJudge: \"\", // 临界值判断条件\n      allDistrictAlert: {}, // 全区对应的预警值\n      allDistrictExpain: {}, // 全区对应的说明\n      isShowChart: true,\n      streetRanking: [], //全区指数对应的街道排名\n      alertJudge: \"\",\n      MapModalParams: \"\"\n    };\n  },\n  created() {\n    // this.queryStreetsData();\n    this.queryAllIndexAlertData();\n    this.queryAllIndexValue().then(() => {\n      this.queryAllIndexValueByDate();\n    });\n  },\n  computed: {\n    // 折线图\n    line() {\n      let color = \"\";\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n      let pieces = [{ gt: 0, lt: 1 }];\n      if (this.alertJudge === \"low\") {\n        pieces = [{ gte: 0, lt: Number(this.alertValue), color: \"red\" }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{ gte: Number(this.alertValue), lt: 100, color: \"red\" }];\n      } else {\n        pieces = [{ gt: 0, lt: 1 }];\n      }\n      let data = this.timeData;\n      let dateList = data.map(function(item) {\n        return item[0];\n      });\n      /* eslint-disable */\n      this.dateList = dateList;\n      let valueList = data.map(function(item) {\n        return item[1];\n      });\n      let option = {\n        // Make gradient line here\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n\n        title: [\n          {\n            top: \"55%\",\n            left: \"center\",\n            text: \"\"\n          }\n        ],\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\"\n          },\n          formatter: function(params) {\n            const date = params[0].axisValue;\n            const color = params[0].color;\n            const data = params[0].data;\n            const year = date.slice(0, 4);\n            const month = date.slice(4, 6);\n            const day = date.slice(6, 8);\n            return `${year}年${month}月${day}日</br><span style=\"background:${color};border-radius:50%;width:10px;height:10px;display:inline-block\"></span>&nbsp;${data}\n          `;\n          }\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: dateList,\n            gridIndex: 1,\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        yAxis: [\n          {\n            splitLine: { show: false },\n            gridIndex: 1,\n            scale: true,\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: { type: [\"line\", \"bar\"] }\n          },\n          right: \"3%\"\n        },\n        grid: [\n          {\n            bottom: \"10%\",\n            top: \"1%\",\n            // right: \"25%\",\n            containLabel: true\n          },\n          {\n            x: \"5%\",\n            y: \"5%\",\n            x2: \"7%\",\n            y2: \"10%\"\n          },\n          {\n            height: \"100%\"\n          }\n        ],\n        dataZoom: [\n          {\n            type: \"slider\", //图表下方的伸缩条\n            show: false, //是否显示\n            realtime: true, //\n            start: 0, //伸缩条开始位置（1-100），可以随时更改\n            end: 100 //伸缩条结束位置（1-100），可以随时更改\n          },\n          {\n            type: \"inside\", //鼠标滚轮\n            realtime: true\n          }\n        ],\n        series: [\n          {\n            type: \"line\",\n            showSymbol: true,\n            data: valueList,\n            itemStyle: {\n              normal: {\n                color: params => {\n                  if (this.explainJudge === \"forward\") {\n                    return \"#D24A53\";\n                  } else {\n                    return \"#FFD6A0\";\n                  }\n                },\n                lineStyle: {\n                  // color: color\n                }\n              }\n            },\n            markLine: {\n              symbol: \"none\",\n              precision: 2,\n              silent: true,\n              itemStyle: {\n                normal: {}\n              },\n              data: [\n                {\n                  type: \"average\",\n                  name: \"平均值\",\n                  lineStyle: {\n                    color: \"#3FFCFD\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                },\n                {\n                  name: \"预警线\",\n                  yAxis: this.alertValue,\n                  lineStyle: {\n                    color: \"#F92E2A\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      };\n      return option;\n    },\n    // 全街道柱状图\n    bar() {\n      const data = this.streetRanking;\n      let dataX = data.map(item => {\n        return item[0];\n      });\n      let dataY = data.map(item => {\n        return item[1];\n      });\n      let endPercent = 100;\n      if (this.gridType === \"street\") {\n        endPercent = 100;\n      } else {\n        endPercent = (30 / dataX.length) * 100;\n      }\n      let option = {\n        // visualMap: [\n        //   {\n        //     show: false,\n        //     type: \"continuous\",\n        //     seriesIndex: 0,\n        //     dimension: 0,\n        //     min: 0,\n        //     max: 10\n        //   }\n        // ],\n        color: \"#78B1DD\",\n        tooltip: {\n          trigger: \"axis\"\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: { type: [\"line\", \"bar\"] },\n            onClick: function() {\n              console.log(111);\n            }\n          },\n          right: \"3%\"\n        },\n        dataZoom: [\n          //给x轴设置滚动条\n          {\n            start: 0, //默认为0\n            end: endPercent,\n            type: \"slider\",\n            show: false,\n            handleSize: 0, //滑动条的 左右2个滑动条的大小\n            backgroundColor: \"#ddd\", //两边未选中的滑动条区域的颜色\n            showDataShadow: false, //是否显示数据阴影 默认auto\n            showDetail: false //即拖拽时候是否显示详细数值信息 默认true\n          },\n          //下面这个属性是里面拖到\n          {\n            type: \"inside\",\n            show: false,\n            start: 0, //默认为1\n            end: 100\n          }\n        ],\n        grid: [\n          {\n            bottom: \"10%\",\n            top: \"10%\",\n            left: \"4%\",\n            right: \"2%\"\n          }\n        ],\n        xAxis: [\n          {\n            type: \"category\",\n            triggerEvent: true,\n            data: dataX,\n            axisLine: {\n              color: \"#fff\"\n            },\n\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              },\n              interval: 0\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            splitLine: { show: false },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        series: [\n          {\n            name: \"街道\",\n            type: \"bar\",\n            data: dataY\n          }\n        ]\n      };\n      return option;\n    },\n    // 圆环中心的值\n    percentValue() {\n      // 保证异步拿到数据后再渲染\n      if (this.allEvluations.length > 1) {\n        if (this.oneDaySpanMax >= 1) {\n          this.prevPercentValue = this.allEvluations[0].timeData[\n            this.oneDaySpanMax - 1\n          ].value.toFixed(2);\n        } else {\n          this.prevPercentValue = 1;\n        }\n        return this.allEvluations[0].timeData[this.oneDaySpanMax].value.toFixed(\n          2\n        );\n      }\n    },\n    // 目前系统的时间\n    currentDayDate() {\n      if (this.allEvluations.length > 1) {\n        return this.formatTime(\n          this.allEvluations[0].timeData[this.oneDaySpanMax].date\n        );\n      }\n    },\n    propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        alertValue: this.alertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexValue: \"\",\n        streetsData: this.indexValueByDate\n      };\n    }\n  },\n  mounted() {\n    this.getGridsAlert();\n  },\n  methods: {\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert() {\n      this.$http(`${this.baseUrl}/static/gridsAlerts.json`).then(result => {\n        for (let grids of result.data) {\n          grids[0] = \"网格\" + this.rn(1, 10);\n          grids[1] = this.rn(0, 15);\n        }\n        if (result.data) this.gridsAlert = result.data;\n      });\n    },\n    // 获取街道的geojson\n    // async queryStreetsData() {\n    //   const streetsGeoUrl = `${this.baseUrl}/static/streets.json`;\n    //   const res = await this.$http.get(streetsGeoUrl);\n    //   this.streetsGeoJson = res.data;\n    // },\n    // 获取所有属性的专属特性-临界值\n    async queryAllIndexAlertData() {\n      const indexAlertDataUrl = `${this.baseUrl}/static/indexAlertValue.json`;\n      const res = await this.$http.get(indexAlertDataUrl);\n      this.indexAlertData = res.data;\n    },\n    // 获取所有指标对应每天的所有街道的数据\n    async queryAllIndexValueByDate() {\n      let indexValueUrl = \"\";\n      if (this.gridType === \"street\") {\n        indexValueUrl = `${this.baseUrl}/static/indexvalue.json`;\n      } else if (this.gridType === \"community\") {\n        indexValueUrl = `${this.baseUrl}/static/communityValue.json`;\n      } else if (this.gridType === \"grid\") {\n        indexValueUrl = `${this.baseUrl}/static/communityValue.json`;\n      }\n      const res = await this.$http.get(indexValueUrl);\n      this.totalValueByDate = res.data;\n      // 进入全区的初次街道排名\n      const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n        .date;\n      let streetDataByDate = this.totalValueByDate\n        .filter(item => Number(item.date) === currentDate)\n        .filter(item => item.indexId === \"ZS\")[0];\n      // 计算街道排名\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    async queryAllIndexValue() {\n      const indexSystemUrl = `${this.baseUrl}/static/signsIndex.json`;\n      // 全区指标值\n      const indexEvaluation = `${this.baseUrl}/static/indexEvaluation.json`;\n      // 全区预警判断条件以及临界值\n      const districtAlertUrl = `${this.baseUrl}/static/districtAlertValue.json`;\n      // 全区评价说明解释\n      const districtExplainUrl = `${this.baseUrl}/static/districtExplain.json`;\n      let indexes = await this.$http.get(indexSystemUrl);\n      let evaluationData = await this.$http.get(indexEvaluation);\n      let districtAlertData = await this.$http.get(districtAlertUrl);\n      let districtExplainData = await this.$http.get(districtExplainUrl);\n      const allIndexes = indexes.data;\n      const allEvluations = evaluationData.data;\n      const allIndexesAlertValue = districtAlertData.data;\n      const districtExplainValue = districtExplainData.data;\n\n      if (indexes.status === 200 && evaluationData.status === 200) {\n        this.listLeftData = allIndexes.slice(0, 2).reverse();\n        this.listRightData = allIndexes.slice(-2);\n        // FIXME: 需要优化的地方 对系统时间的处理和全区最后一个值得处理\n        // 全区圆环所需要的数据\n        this.allDistrictData = allEvluations[0].timeData;\n        this.allDistrictAlert = allIndexesAlertValue.filter(\n          item => item.id === \"ZS\"\n        )[0];\n        this.allDistrictExpain = districtExplainValue.filter(\n          item => item.id === \"ZS\"\n        )[0];\n        // 进入系统后折线图显示全区的值\n        this.linkage(\n          allEvluations[0].timeData,\n          this.allDistrictAlert.alertValue,\n          this.allDistrictAlert.explainJudge,\n          this.allDistrictAlert.alertJudge\n        );\n        // 显示全区的街道排名\n        // 将每个指标对应的值放到对应的指标\n\n        allEvluations.forEach(item => {\n          for (let index = 0; index < allIndexes.length; index++) {\n            const firstLevelItem = allIndexes[index];\n            if (firstLevelItem.id === item.id) {\n              firstLevelItem.time = item.timeData;\n              // firstLevelItem.alertValue = item.alertValue;\n              // 添加判断是低于还是高于显示预警的判断\n              // if (firstLevelItem.id == \"ZS2\" || firstLevelItem.id == \"ZS3\") {\n              //   firstLevelItem.alertJudge = \"low\";\n              // } else {\n              //   firstLevelItem.alertJudge = \"high\";\n              // }\n              // 预警值以及临界值以及预警显示条件\n              for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                  // 预警值\n                  firstLevelItem.alertValue =\n                    allIndexesAlertValue[i].alertValue;\n                  firstLevelItem.alertJudge =\n                    // 预警显示条件\n                    allIndexesAlertValue[i].alertJudge;\n                  // 临界值1\n                  firstLevelItem.criticalValue1 =\n                    allIndexesAlertValue[i].criticalValue1;\n                  // 临界值2\n                  firstLevelItem.criticalValue2 =\n                    allIndexesAlertValue[i].criticalValue2;\n                  // 临界值3\n                  firstLevelItem.criticalValue3 =\n                    allIndexesAlertValue[i].criticalValue3;\n                  // 临界值判断条件\n                  firstLevelItem.explainJudge =\n                    allIndexesAlertValue[i].explainJudge;\n                  // 最大值\n                  firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue;\n                  // 最小值\n                  firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                }\n                // 评价说明\n                if (firstLevelItem.id === districtExplainValue[i].id) {\n                  firstLevelItem.meaning = districtExplainValue[i].meaning;\n                  firstLevelItem.mode = districtExplainValue[i].mode;\n                }\n              }\n              break;\n            } else {\n              if (item.id.indexOf(firstLevelItem.id) != -1) {\n                for (\n                  let secondIndex = 0;\n                  secondIndex < firstLevelItem.children.length;\n                  secondIndex++\n                ) {\n                  const secondLevelIndex = firstLevelItem.children[secondIndex];\n                  if (secondLevelIndex.id === item.id) {\n                    secondLevelIndex.time = item.timeData;\n                    for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                      if (secondLevelIndex.id === allIndexesAlertValue[i].id) {\n                        // 预警值\n                        secondLevelIndex.alertValue =\n                          allIndexesAlertValue[i].alertValue;\n                        secondLevelIndex.alertJudge =\n                          // 预警显示条件\n                          allIndexesAlertValue[i].alertJudge;\n                        // 临界值1\n                        secondLevelIndex.criticalValue1 =\n                          allIndexesAlertValue[i].criticalValue1;\n                        // 临界值2\n                        secondLevelIndex.criticalValue2 =\n                          allIndexesAlertValue[i].criticalValue2;\n                        // 临界值3\n                        secondLevelIndex.criticalValue3 =\n                          allIndexesAlertValue[i].criticalValue3;\n                        // 临界值判断条件\n                        secondLevelIndex.explainJudge =\n                          allIndexesAlertValue[i].explainJudge;\n                        // 最大值\n                        secondLevelIndex.maxValue =\n                          allIndexesAlertValue[i].maxValue;\n                        // 最小值\n                        secondLevelIndex.minValue =\n                          allIndexesAlertValue[i].minValue;\n                      }\n                      if (secondLevelIndex.id === districtExplainValue[i].id) {\n                        secondLevelIndex.meaning =\n                          districtExplainValue[i].meaning;\n                        secondLevelIndex.mode = districtExplainValue[i].mode;\n                      }\n                    }\n\n                    break;\n                  } else {\n                    for (\n                      let thirdIndex = 0;\n                      thirdIndex < secondLevelIndex.children.length;\n                      thirdIndex++\n                    ) {\n                      const thirdLevelIndex =\n                        secondLevelIndex.children[thirdIndex];\n                      if (thirdLevelIndex.id === item.id) {\n                        thirdLevelIndex.time = item.timeData;\n                        thirdLevelIndex.value = item.timeData[0].value;\n                        for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (\n                            thirdLevelIndex.id === allIndexesAlertValue[i].id\n                          ) {\n                            // 预警值\n                            thirdLevelIndex.alertValue =\n                              allIndexesAlertValue[i].alertValue;\n                            thirdLevelIndex.alertJudge =\n                              // 预警显示条件\n                              allIndexesAlertValue[i].alertJudge;\n                            // 临界值1\n                            thirdLevelIndex.criticalValue1 =\n                              allIndexesAlertValue[i].criticalValue1;\n                            // 临界值2\n                            thirdLevelIndex.criticalValue2 =\n                              allIndexesAlertValue[i].criticalValue2;\n                            // 临界值3\n                            thirdLevelIndex.criticalValue3 =\n                              allIndexesAlertValue[i].criticalValue3;\n                            // 临界值判断条件\n                            thirdLevelIndex.explainJudge =\n                              allIndexesAlertValue[i].explainJudge;\n                            // 最大值\n                            thirdLevelIndex.maxValue =\n                              allIndexesAlertValue[i].maxValue;\n                            // 最小值\n                            thirdLevelIndex.minValue =\n                              allIndexesAlertValue[i].minValue;\n                          }\n                          if (\n                            thirdLevelIndex.id === districtExplainValue[i].id\n                          ) {\n                            thirdLevelIndex.meaning =\n                              districtExplainValue[i].meaning;\n                            thirdLevelIndex.mode = districtExplainValue[i].mode;\n                          }\n                        }\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n        this.allEvluations = allEvluations;\n      } else {\n        this.$Message.error(\"数据请求失败\");\n      }\n    },\n\n    // echarts 根据时间的变化而数据变化\n    showDayData(event) {\n      // 当前点击的时间\n      let dayDate = event.name;\n      for (let i = 0; i < this.dateList.length; i++) {\n        if (dayDate === this.dateList[i].toString()) {\n          this.oneDaySpanMax = i;\n        }\n      }\n    },\n    // echarts 柱状图点击事件\n    showStreetPage(instance) {\n      let nextStreet = {};\n      let nextStreetName = instance.name || instance.value;\n      let nextStreetData = instance.data;\n      for (let key in this.$store.state.allStreetNameCode) {\n        if (nextStreetName === this.$store.state.allStreetNameCode[key]) {\n          nextStreet.gridId = key;\n          nextStreet.gridName = nextStreetName;\n        }\n      }\n      if (this.gridType === \"street\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"street\", nextStreet }\n        });\n      } else if (this.gridType === \"community\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"community\", nextStreet }\n        });\n      } else if (this.gridType === \"grid\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"grid\", nextStreet }\n        });\n      }\n    },\n    // 是否显示地图modal\n    handleMapModal(params) {\n      this.MapModalParams = params;\n      this.isShowMapModal = params.status;\n      // this.gridType = \"street\";\n      // this.clickedTabItem = \"街道\";\n      if (params.status) {\n        const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n          .date;\n        const indexId = params.data.id;\n        this.indexValueByDate = this.totalValueByDate\n          .filter(item => Number(item.date) === currentDate)\n          .filter(item => item.indexId === indexId)[0];\n        // this.streetsGeoJson.features.forEach((geoItem, index) => {\n        //   geoItem.properties.gridValue = mapData[geoItem.properties.jdcode];\n        // });\n        // 获取当前属性的临界值\n        const indexAlertValue = this.indexAlertData.filter(\n          item => item.id === indexId\n        )[0];\n        this.criticalValue1 = indexAlertValue.criticalValue1;\n        this.criticalValue2 = indexAlertValue.criticalValue2;\n        this.criticalValue3 = indexAlertValue.criticalValue3;\n        this.alertValue = indexAlertValue.alertValue;\n        this.alertJudge = indexAlertValue.alertJudge;\n        this.explainJudge = indexAlertValue.explainJudge;\n      }\n    },\n    // 显示折线图\n    linkage(timeData, alertValue, explainJudge, alertJudge) {\n      this.alertValue = alertValue;\n      this.explainJudge = explainJudge;\n      this.alertJudge = alertJudge;\n      const timeArr = []; // 时间数组\n      const timeValue = []; // 每个时间对应的数据\n      timeData.map(function(item) {\n        timeArr.push(item.date);\n        timeValue.push(item.value);\n      });\n      // 转换为二维数组\n      this.timeData = timeArr.map((key, value) => [key, timeValue[value]]);\n    },\n    // 显示柱状图\n    showBarStreet(indexId) {\n      this.nowIndexId = indexId;\n      // 根据事件和id获取对应的街道的值\n      const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n        .date;\n      let streetDataByDate = this.totalValueByDate\n        .filter(item => Number(item.date) === currentDate)\n        .filter(item => item.indexId === indexId)[0];\n      // 计算街道排名\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    // 计算排名\n    computeValue(indexValueItem) {\n      const streetName = [];\n      const streetValue = [];\n      const checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n      for (let key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n      let rankingData = streetName.map((key, index) => {\n        return [key, streetValue[index]];\n      });\n      // 计算排名\n      let mapped = rankingData.map(function(ar, i) {\n        return { value: ar[1], index: i }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function(a, b) {\n        return b.value - a.value;\n      });\n      // 将三个undefined转换为对应的字段\n      let result = mapped.map(function(key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (\n            rankingData[key.index][1].toString().indexOf(\".\") == -1 &&\n            rankingData[key.index][1].length == 8\n          ) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n        return rankingData[key.index];\n      });\n      // 计算排名保留\n      let indexRanking = [];\n      result.map(key => {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    },\n    // 显示一级指标高亮\n    showActiveFrist() {\n      this.$store.state.indicatorIndex = \"一\";\n      // 清空当前界面上的高亮效果\n      this.$store.state.leftExponentail.currentFirstLevel = \"\";\n      this.$store.state.leftExponentail.currentSecondLevel = \"\";\n      this.$store.state.leftExponentail.currenThridLevel = \"\";\n      this.$store.state.rightExponentail.currentFirstLevel = \"\";\n      this.$store.state.rightExponentail.currentSecondLevel = \"\";\n      this.$store.state.rightExponentail.currenThridLevel = \"\";\n    },\n    // 格式化时间\n    formatTime(time) {\n      time = time.toString();\n      time =\n        time.slice(0, 4) +\n        \"年\" +\n        time.slice(4, 6) +\n        \"月\" +\n        time.slice(6, 8) +\n        \"日\";\n      return time;\n    },\n    //返回指定范围随机数\n    rn(min, max) {\n      var n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    handleMapTab(item) {\n      this.clickedTabItem = item;\n      switch (item) {\n        case \"街道\":\n          this.gridType = \"street\";\n          break;\n        case \"社区\":\n          this.gridType = \"community\";\n          break;\n        case \"基础网格\":\n          this.gridType = \"grid\";\n          break;\n        default:\n      }\n    }\n  },\n  mounted() {\n    // 将组件保存到vuex中\n    this.$store.state.leftExponentail = this.$refs.leftExponentail;\n    this.$store.state.rightExponentail = this.$refs.rightExponentail;\n  },\n  watch: {\n    oneDaySpanMax() {\n      this.showBarStreet(this.nowIndexId);\n    },\n    gridType() {\n      this.queryAllIndexValueByDate().then(() => {\n        this.handleMapModal(this.MapModalParams);\n      });\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n// 深度作用选择器,将父组件的样式渗透到子组件\n#{\"/deep/\"} .trend_arrow {\n  width: 10px;\n  height: 10px;\n  display: inline-block !important;\n  background-size: contain;\n  // transform: translateX(0.6rem);\n}\n#{\"/deep/\"} .trend_arrow_red {\n  background: url(\"../assets/img/status/downred.svg\") no-repeat center;\n}\n#{\"/deep/\"} .trend_arrow_blue {\n  background: url(\"../assets/img/status/upblue.svg\") no-repeat center;\n}\n#{\"/deep/\"} .trend_arrow_yellow {\n  background: url(\"../assets/img/status/yellow.svg\") no-repeat center;\n}\n.swiper-slide {\n  height: 100vh;\n  font-size: 18px;\n  color: #fff;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  background-color: transparent !important;\n  justify-content: space-around !important;\n  background-size: 100% 100%;\n  z-index: 100;\n}\n.arrow-yellow-up:after {\n  content: \"\";\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n  border-bottom: 12px solid #ffff02;\n  display: inline-block;\n  transform: translateX(0.5rem);\n}\n.home {\n  background: #384457 url(\"../assets/img/status/background.png\") no-repeat;\n  // background: #012134;\n  background-size: 100% 100%;\n  width: 100%;\n  height: calc(100vh - 3.6rem);\n  overflow: hidden;\n  position: relative;\n  .map-modal {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 23;\n    background: rgba(0, 0, 0, 0.8);\n    padding: 5rem;\n    .close-icon {\n      position: absolute;\n      right: 1rem;\n      top: 1rem;\n      cursor: pointer;\n    }\n    .close-icon:hover {\n      color: #3dc5c4;\n    }\n    .map-container {\n      width: 100%;\n      height: 100%;\n      .container-header {\n        width: 100%;\n        height: 3rem;\n        background: #012134;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        .tab-item {\n          height: 2.2rem;\n          line-height: 2.2rem;\n          font-size: 14px;\n          font-weight: 800;\n          padding: 0 1.5rem;\n          margin-right: 1rem;\n          border-radius: 0.3rem;\n          cursor: pointer;\n        }\n        .tab-active {\n          background: #143b6b;\n        }\n      }\n      .container-main {\n        width: 100%;\n        height: calc(100% - 3rem);\n        background: RGBA(1, 28, 40, 0.8);\n      }\n    }\n  }\n  .floating-layer {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 22;\n    .evaluation-nav {\n      width: 40%;\n      display: flex;\n      flex-wrap: nowrap;\n      justify-content: space-around;\n      justify-items: center;\n      margin: 1rem;\n      margin-bottom: 0;\n      span {\n        display: inline-block;\n        text-align: center;\n      }\n      .nav {\n        width: 79px;\n        height: 20px;\n        font-size: 16px;\n        font-family: PingFang-SC-Bold;\n        font-weight: bold;\n        color: rgba(255, 255, 255, 1);\n      }\n      .color-good {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #2a7804;\n        border-radius: 12px;\n      }\n      .color-notgood {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #047878;\n        border-radius: 12px;\n      }\n      .color-general {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #f7d307;\n        border-radius: 12px;\n      }\n      .color-risk {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #f7a307;\n        border-radius: 12px;\n      }\n      .color-alert {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #f71b07;\n        border-radius: 12px;\n      }\n    }\n    .assess {\n      height: 30rem;\n      width: 100%;\n      overflow-x: hidden;\n      overflow-y: scroll;\n      .assess-content {\n        margin: 1rem 3rem;\n        display: flex;\n        justify-content: space-between;\n        justify-items: center;\n        .a-left,\n        .a-right {\n          flex: 2.5;\n        }\n        .a-center {\n          position: relative;\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          justify-content: start;\n          align-items: center;\n          margin-top: 2.5rem;\n          .time {\n            text-align: center;\n            display: flex;\n            font-size: 8px;\n            font-weight: bolder;\n            color: #fff;\n            position: absolute;\n            bottom: 30%;\n            span {\n              margin-left: 0.4rem;\n              font-size: 5px;\n            }\n            .timer-icon {\n              display: inline-block;\n              width: 20px;\n              height: 20px;\n              background: url(\"../assets/img/status/timer.png\") no-repeat center;\n              background-size: contain;\n            }\n          }\n          .number {\n            position: absolute;\n            bottom: 10%;\n            width: 40%;\n            height: 2.5rem;\n            background: #7cb5e1;\n            border-radius: 5px;\n            line-height: 2.5rem;\n            vertical-align: middle;\n            text-align: center;\n            margin: 2rem auto;\n            .number-text {\n              font-weight: bold;\n              cursor: pointer;\n            }\n          }\n        }\n      }\n    }\n    .broken-line {\n      margin-top: -0.5rem;\n      height: calc(100vh - 41.6rem);\n      .isSelected {\n        color: #28a8e0;\n      }\n      .line-title {\n        height: 1.8rem;\n        line-height: 1.8rem;\n        vertical-align: middle;\n        margin-bottom: 0.5rem;\n        background: rgba(16, 41, 67, 0.75);\n        border: 1px solid rgba(147, 147, 147, 0.75);\n        border-radius: 8px 8px 0px 0px;\n        cursor: pointer;\n        margin: 0 3rem;\n        .close-icon {\n          cursor: pointer;\n        }\n        .close-icon:hover {\n          color: #3dc5c4;\n        }\n        .title-left {\n          margin-left: 1rem;\n          font-size: 14px;\n          &:hover {\n            color: #28a8e0;\n          }\n        }\n        .title-right {\n          float: right;\n          margin-right: 1rem;\n          font-size: 14px;\n        }\n      }\n      .line-echarts {\n        height: calc(100vh - 38.2rem);\n        margin: 0 3rem;\n        background: rgba(16, 41, 67, 0.6);\n        border: 1px solid rgba(147, 147, 147, 0.75);\n        border-top: none;\n      }\n    }\n  }\n}\n</style>\n"]}]}