{"remainingRequest":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/grid/src/components/gridView.vue?vue&type=style&index=0&id=275b14ca&lang=scss&scoped=true&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/grid/src/components/gridView.vue","mtime":1586942496844},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/css-loader/index.js","mtime":1567574744060},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1573543948284},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/postcss-loader/src/index.js","mtime":1565602920420},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/sass-loader/lib/loader.js","mtime":1568613755672},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js","mtime":1573543948284}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.basisGrid {\n  width: 100%;\n  height: calc(100vh - 3.6rem);\n  padding-top: 0.1rem;\n  .mapArcgis {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 11;\n  }\n  .floating-layer {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    .currentDate {\n      position: absolute;\n      z-index: 1002;\n      display: flex;\n      align-content: center;\n      font-size: 12px;\n      font-weight: bolder;\n      color: #000;\n      font-weight: bold;\n      justify-content: center;\n      left: 15%;\n      top: 2%;\n      span {\n        margin-left: 0.4rem;\n      }\n      .timer-icon {\n        display: inline-block;\n        width: 20px;\n        height: 20px;\n        // background: url(\"../assets/img/status/timer.png\") no-repeat center;\n        background-size: contain;\n      }\n    }\n    .basis-content {\n      width: 100%;\n      height: 100%;\n\n      .dateSelector {\n        position: absolute;\n        z-index: 22;\n        width: 100%;\n        // left: 0%;\n        // bottom: 0rem;\n        top: 1rem;\n        z-index: 99;\n        .selector {\n          display: flex;\n          width: 100%;\n          line-height: 3rem;\n          padding: 0 2rem;\n          .beginDate {\n            width: 10rem;\n          }\n          .endDate {\n            width: 10rem;\n            line-height: 3rem;\n            margin-left: 1rem;\n          }\n          .slider {\n            width: 100%;\n          }\n        }\n      }\n      &:after {\n        content: \"\";\n        display: block;\n        clear: both;\n      }\n      .bc-left-right {\n        overflow: auto;\n        position: relative;\n        height: 100%;\n        width: 18rem;\n        float: right;\n        z-index: 100;\n        background: rgba(71, 90, 109, 1);\n        opacity: 0.8;\n        .search {\n          margin: 0.5rem 0.5rem;\n        }\n        .parameter {\n          background: rgba(71, 90, 109, 0.75);\n          margin: 0rem 0.3rem;\n          margin-top: 0.5rem;\n          // overflow-y: scroll;\n          // overflow-x: scroll;\n          overflow: auto;\n          .index {\n            width: 100%;\n            margin-bottom: 1rem;\n            .index-top {\n              height: 2rem;\n              line-height: 2rem;\n              vertical-align: middle;\n              background: #3a404e;\n              .left {\n                padding-left: 0.5rem;\n              }\n              .right {\n                float: right;\n                margin-right: 1rem;\n              }\n            }\n            .index-content {\n              font-size: 14px;\n              padding: 1rem;\n              background: #242c3b;\n              span {\n                font-size: 16px;\n                font-weight: 600;\n                color: #ffc000;\n                margin: 0 0.2rem;\n              }\n            }\n          }\n        }\n      }\n      .bc-left-left {\n        overflow: auto;\n        position: relative;\n        height: 100%;\n        width: 18rem;\n        float: left;\n        z-index: 100;\n        background: rgba(71, 90, 109, 1);\n        opacity: 0.8;\n        .indicators-list {\n          height: 100%;\n          width: 18rem;\n          background: rgba(16, 41, 67, 0.9);\n          float: left;\n          opacity: 0.9;\n          overflow: scroll;\n          -webkit-overflow-scrolling: touch;\n          .index-title {\n            height: 3rem;\n            width: 100%;\n            cursor: pointer;\n            display: flex;\n            font-size: 14px;\n            justify-content: center;\n            align-items: center;\n          }\n          .index-content {\n            width: 100%;\n            padding-bottom: 0.5rem;\n            margin: 0.5rem 0;\n            // padding-right: 10rem;\n            // margin: 0 0.5rem 0.5rem;\n            // background: rgba(16, 41, 67, 1);\n            .isEqBackground {\n              background: #102943 !important;\n            }\n            .content {\n              padding: 0.3rem 0.5rem;\n              background: rgba(62, 83, 101, 0.9);\n              border-radius: 5px;\n              display: flex;\n              align-items: center;\n              justify-content: space-between;\n              &:after {\n                content: \"\";\n                display: block;\n                clear: both;\n                visibility: hidden;\n              }\n\n              .content-left {\n                flex-grow: 1;\n                display: flex;\n                align-items: center;\n                // justify-content: space-between;\n                justify-items: center;\n                cursor: pointer;\n                .ranking-number {\n                  width: 18px;\n                  height: 18px;\n                  background: rgba(124, 181, 225, 1);\n                  border-radius: 5px;\n                  text-align: center;\n                  line-height: 18px;\n                }\n                .trends {\n                  margin-left: 0.5rem;\n                  color: #ffc000;\n                }\n                .name {\n                  text-align: center;\n                  vertical-align: middle;\n                  font-weight: bold;\n                  margin-left: 0.5rem;\n                }\n              }\n              .content-right {\n                // flex-grow: 1;\n                // font-size: 16px;\n                color: #ffff;\n                text-align: right;\n                margin-right: 0.5rem;\n                // margin-top: -0.3rem;\n              }\n            }\n            .isSelectedSecond {\n              box-shadow: 0px 0px 5px 2px #236ca6;\n            }\n            .system {\n              width: 90%;\n              margin: 0.5rem 0.5rem;\n              padding: 0.3rem 0.5rem;\n              background-color: rgba(62, 83, 101, 0.3);\n              &:after {\n                content: \"\";\n                display: block;\n                clear: both;\n              }\n              .content-left {\n                cursor: pointer;\n                float: left;\n                margin-right: 0.2rem;\n              }\n              .content-right {\n                float: right;\n                margin-right: 0.5rem;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  .broken-line {\n    height: 10rem;\n    width: calc(100vw - 36rem);\n    position: absolute;\n    left: 50%;\n    bottom: 12%;\n    -webkit-transform: translate(-50%, 0%);\n    -moz-transform: translate(-50%, 0%);\n    transform: translate(-50%, 0%);\n    float: left;\n    z-index: 90;\n    .isSelected {\n      color: #28a8e0;\n    }\n    .line-title {\n      height: 2rem;\n      line-height: 2rem;\n      vertical-align: middle;\n      margin-bottom: 1rem;\n      background: rgba(16, 41, 67, 0.8);\n      border: 1px solid rgba(147, 147, 147, 0.8);\n      border-radius: 8px 8px 0px 0px;\n      margin: 0 0.5rem;\n      .title-left {\n        cursor: pointer;\n        margin-left: 1rem;\n        font-size: 1rem;\n      }\n      .title-nowtime {\n        margin-left: 2rem;\n      }\n      .title-right {\n        float: right;\n        margin-right: 1rem;\n      }\n    }\n    .line-echarts {\n      height: 14rem;\n      margin: 0 0.5rem;\n      background: rgba(16, 41, 67, 0.8);\n      border: 1px solid rgba(147, 147, 147, 0.8);\n      border-top: none;\n    }\n  }\n}\n",{"version":3,"sources":["gridView.vue"],"names":[],"mappingswfile":"gridView.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"basisGrid\">\n    <!-- 浮动层 -->\n    <div class=\"floating-layer\">\n      <!-- 时间 -->\n      <div class=\"currentDate\">\n        <span class=\"timer-icon\"></span>\n        <span>{{currentDayDate}}</span>\n      </div>\n      <div class=\"basis-content\">\n        <!-- 地图 -->\n        <div id=\"mapArcgis\" class=\"mapArcgis\">\n          <bottomMap\n            :gridType=\"gridType\"\n            :gridsAlert=\"gridsAlert\"\n            :propsConfig=\"propsConfig\"\n            :indicatorsShow=\"indicatorsShow\"\n          ></bottomMap>\n        </div>\n        <!-- 左侧 -->\n        <div class=\"bc-left-left\">\n          <div class=\"indicators-list\">\n            <div class=\"index-title\">空间单元画像综合排名</div>\n            <div class=\"index-content\" v-for=\"(item,index) in indexRankingData\" :key=\"index\">\n              <div class=\"content\" :class=\"{'isEqBackground':index%2==0}\">\n                <div class=\"content-left\">\n                  <!-- 排名 -->\n                  <span class=\"ranking-number\">{{index+1}}</span>\n                  <!-- 具体指数 -->\n                  <span class=\"name\">{{item[0]}}</span>\n                </div>\n                <div class=\"content-right\">\n                  <!-- 指数值 -->\n                  <span class=\"trends\">{{Number(item[1]).toFixed(2)}}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- 右侧内容 -->\n        <div class=\"bc-left-right\">\n          <!-- 网格显示 初始化 -->\n          <div class=\"parameter\">\n            <!-- 基础网格总数量 -->\n            <parameterText\n              :streetData=\"streetData\"\n              :streetNumer=\"Number(this.$store.state.streetNumber)\"\n              :explainJudge=\"explainJudge\"\n              :averageValue=\"Number(averageValue)\"\n              :indexValue=\"Number(indexValue)\"\n              :minValue=\"Number(minValue)\"\n              :maxValue=\"Number(maxValue)\"\n              :criticalValue1=\"Number(criticalValue1)\"\n              :criticalValue2=\"Number(criticalValue2)\"\n              :criticalValue3=\"Number(criticalValue3)\"\n            />\n\n            <radarValue :data=\"firstLevelIndex\" :loading=\"loading\" :date=\"currentDayDate\"/>\n            <pieValue :propsConfig=\"propsConfig\" :loading=\"loading\" :date=\"currentDayDate\"/>\n          </div>\n          <!-- 网格显示 -->\n        </div>\n        <!-- 折线图和柱状图 -->\n        <div class=\"broken-line\" v-show=\"indicatorsShow\">\n          <div class=\"line-title\">\n            <!-- <span\n              class=\"title-left\"\n              :class=\"{isSelected:isShowChart}\"\n              @click=\"isShowChart = true\"\n            >社区综合排名</span>&nbsp;-->\n            <span class=\"title-left\">{{ currentIndexName + '变化趋势'}}</span>\n\n            <div class=\"dateSelector\">\n              <div class=\"selector\">\n                <div class=\"slider\">\n                  <Slider\n                    v-show=\"false\"\n                    v-model=\"daySpan\"\n                    :max=\"dayCount\"\n                    @on-input=\"queryIndexValueByDate\"\n                    :tip-format=\"format\"\n                  ></Slider>\n                </div>\n              </div>\n            </div>\n            <span class=\"title-right\">\n              <Icon type=\"md-alert\"/>\n            </span>\n          </div>\n          <!-- 政柱状图 -->\n          <div class=\"line-echarts\">\n            <!-- <IEcharts\n              :option=\"bar\"\n              :resizable=\"true\"\n              @click=\"showCommunityPage\"\n              v-show=\"isShowChart\"\n            ></IEcharts>-->\n            <IEcharts :option=\"line\" :resizable=\"true\" @click=\"showDayData\"></IEcharts>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport moment from \"moment\";\nimport parameterText from \"@/components/parameterText.vue\";\nimport indexJudge from \"@/components/indexJudge.vue\";\nimport indexRanking from \"@/components/indexRanking.vue\";\nimport gridJudgeRanking from \"@/components/gridJudgeRanking.vue\";\nimport gridsAlert from \"@/components/gridsAlert.vue\";\nimport gridsJudgeAlert from \"@/components/gridsJudgeAlert.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport EventBus from \"../utils/EventBus.js\";\nimport radarValue from \"@/components/radarValue.vue\";\nimport pieValue from \"@/components/pieValue.vue\";\n\nexport default {\n  name: \"BasisGrid\",\n  props: {\n    gridType: {\n      type: String,\n      required: true\n    }\n  },\n  components: {\n    IEcharts,\n    parameterText,\n    gridsAlert,\n    bottomMap,\n    indexJudge,\n    indexRanking,\n    gridJudgeRanking,\n    gridsJudgeAlert,\n    headerNavigation,\n    radarValue,\n    pieValue\n  },\n  data() {\n    return {\n      baseUrl: process.env.BASE_URL,\n      beginDate: \"\", // 开始时间\n      endDate: \"\", // 结束时间\n      dayCount: 0, // 总天数\n      currentDate: \"\",\n      showOverview: true,\n      isShowChart: true, // 折线图和柱状图的切换\n      showGridview: false,\n      indexValues: [], // 主页的数据  网格id对应数值--\n      allDistrictValue: \"\", // 街道的全区综合值\n      lineDataX: [], // 折线图坐标X\n      lineDataY: [], // 折线图坐标Y\n      firstLevelIndex: [], // 第一层属性 --指数属性--动力等\n      secondLevelIndex: [], // 第二层属性\n      currentIndexName: \"属性指数\", // 当前页面显示指数的名称\n      currentIndexId: \"ZS\", // 当前页面显示指数的id\n      currentGridId: 1101010, // 当前网格的id\n      currentGridName: \"\", // 当前网格的名字\n      currentFirstLevel: \"\", // 第一层属性值的下标\n      currentSecondLevel: \"\", // 第二层属性值的下标\n      currenThridLevel: \"\",\n      indicatorsShow: false,\n      gridsAlert: [], // 网格的数据,名称和值\n      loading: true,\n      lineAlertValue: \"\", // 折线图预警线的值\n      averageValue: \"\", // 每个属性对应的平均值Y轴的值\n      indexValue: \"\", // 每个属性当前的值\n      criticalValue1: \"\", // 每个属性的临界值1\n      criticalValue2: \"\", // 每个属性的临界值2\n      criticalValue3: \"\", // 每个属性的临界值3\n      explainJudge: \"\", // 临界值正向评价和负向评价\n      minValue: \"\", // 每个属性的最小值\n      maxValue: \"\", // 每个属性的最大值\n      indexRankingData: [], // 柱状图需要的街道排名数据\n      gridJudgeRankingData: [], // 初始化(进入街道页面)柱状图需要的排名数据\n      streetData: [], // 文字组件需要的数据,用于进入街道页面的等级判断个数\n      isEchartsShow: false // 是否渲染雷达图\n    };\n  },\n  computed: {\n    daySpan: {\n      get: function() {\n        return [0, this.dayCount];\n      },\n      set: function() {\n        return [0, this.dayCount];\n      }\n    },\n    // 折线图\n    line() {\n      let color = \"\";\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n      var pieces = [{ gt: 0, lt: 1 }];\n      if (this.alertJudge === \"low\") {\n        pieces = [{ gte: 0, lte: Number(this.lineAlertValue), color: \"red\" }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{ gte: Number(this.lineAlertValue), lt: 100, color: \"red\" }];\n      } else {\n        pieces = [{ gte: 0, lte: 1 }];\n      }\n      let option = {\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n\n        grid: {\n          left: \"4%\",\n          right: \"9%\",\n          // top: \"150\",\n          bottom: \"10\",\n          x: \"2%\",\n          y: \"5%\",\n          x2: \"2%\",\n          y2: \"15%\",\n          containLabel: true\n        },\n\n        xAxis: {\n          type: \"category\",\n          data: this.lineDataX,\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          },\n          scale: true\n        },\n        dataZoom: [\n          {\n            type: \"slider\", //图表下方的伸缩条\n            show: false, //是否显示\n            realtime: true, //\n            start: 0, //伸缩条开始位置（1-100），可以随时更改\n            end: 100 //伸缩条结束位置（1-100），可以随时更改\n          },\n          {\n            type: \"inside\", //鼠标滚轮\n            realtime: true\n          }\n        ],\n        series: [\n          {\n            type: \"line\",\n            showSymbol: true,\n            data: this.lineDataY,\n            itemStyle: {\n              normal: {\n                /* eslint-disable */\n                color: params => {\n                  if (this.explainJudge === \"forward\") {\n                    return \"#D24A53\";\n                  } else {\n                    return \"#FFD6A0\";\n                  }\n                },\n                lineStyle: {\n                  // color: color\n                }\n              }\n            },\n            markLine: {\n              symbol: \"none\",\n              silent: true,\n              precision: 2,\n              itemStyle: {\n                normal: {\n                  textStyle: {\n                    color: \"#F92E2A\"\n                  }\n                }\n              },\n              data: [\n                {\n                  type: \"average\",\n                  name: \"平均值\",\n                  lineStyle: {\n                    color: \"#3FFCFD\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    // formatter: `{b}:{c}`\n                    formatter: function(a) {\n                      return `${a.name}:${a.value}`;\n                    }\n                  }\n                },\n                {\n                  name: \"预警线\",\n                  yAxis: this.lineAlertValue,\n                  lineStyle: {\n                    color: \"#F92E2A\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      };\n      return option;\n    },\n    // 目前系统的时间\n    currentDayDate() {\n      return this.formatTime(this.currentDate);\n    },\n    propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        indexValue: this.indexValue,\n        streetsData: this.streetsData,\n        alertValue: this.lineAlertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexRankingData: this.indexRankingData\n      };\n    }\n  },\n  created() {\n    this.queryAllIndexValue().then(() => {\n      this.queryTrendDataOfTimeSpan(\"ZS\");\n      this.loading = false;\n    });\n    this.getGridsAlert();\n    this.queryDataSpan();\n    EventBus.$on(\"showGridDetail\", this.showIndexDetail);\n  },\n  mounted() {\n    // 从柱状图跳转过来的处理\n    if (this.$route.params.nextStreet) {\n      this.$store.state.currentMenuId = 2;\n      this.showIndexDetail(this.$route.params.nextStreet);\n    }\n  },\n  methods: {\n    // 格式化时间\n    formatTime(time) {\n      time = time.toString();\n      time =\n        time.slice(0, 4) +\n        \"年\" +\n        time.slice(4, 6) +\n        \"月\" +\n        time.slice(6, 8) +\n        \"日\";\n      return time;\n    },\n    // 时间滑动 提示tip\n    format(val) {\n      return (\n        \"当前时间: \" +\n        moment(this.beginDate)\n          .add(val, \"days\")\n          .format(\"YYYY-MM-DD\")\n      );\n    },\n    // 获取指标数据的时间范围\n    async queryDataSpan() {\n      const dataSpanConfig = `${this.baseUrl}/static/dataspan.json`;\n      const result = await this.$http.get(dataSpanConfig);\n      if (result && result.data) {\n        this.beginDate = result.data.beginDate;\n        this.endDate = result.data.endDate;\n        const beginDate = moment(this.beginDate);\n        const endDate = moment(this.endDate);\n        this.dayCount = endDate.diff(beginDate, \"days\");\n      }\n    },\n    // 通过时间滑块查询主页数据\n    queryIndexValueByDate(value) {\n      // 增加时间 天数\n      const date = moment(this.endDate).add(value, \"days\");\n      this.currentDate = date.format(\"YYYY-MM-DD\").replace(/-/g, \"\");\n      this.queryAllIndexValue();\n      return value;\n    },\n\n    // 点击地图网格显示网格的指数数据\n    showIndexDetail(msg) {\n      this.currentGridId = msg.gridId;\n      this.currentGridName = msg.gridName;\n      if (this.currentFirstLevel === \"\") {\n        this.currentFirstLevel = 0;\n      } else {\n        this.currentFirstLevel = this.currentFirstLevel;\n      }\n      this.queryAllIndexValue().then(() => {\n        this.indicatorsShow = true;\n        this.loading = false;\n        this.showGridview = true;\n        this.showOverview = false;\n        this.queryTrendDataOfTimeSpan(this.currentIndexId);\n        this.queryAlerts();\n      });\n    },\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert() {\n      this.$http(`${this.baseUrl}/static/gridsAlerts.json`).then(result => {\n        for (let grids of result.data) {\n          grids[0] = \"网格\" + this.rn(1, 10);\n          grids[1] = this.rn(0, 15);\n        }\n        if (result.data) this.gridsAlert = result.data;\n      });\n    },\n    async queryAllIndexValue() {\n      const gridId = this.currentGridId;\n      // 指标体系\n      const indexSystemUrl = `${this.baseUrl}/static/signsIndex.json`;\n      const indexValueUrl = `${this.baseUrl}/static/indexvalue.json`;\n      const indexAlertValueUrl = `${this.baseUrl}/static/indexAlertValue.json`;\n      let indexes = await this.$http.get(indexSystemUrl);\n      const indexValues = await this.$http.get(indexValueUrl);\n      const indexAlertValue = await this.$http.get(indexAlertValueUrl);\n\n      if (\n        indexValues.status === 200 &&\n        indexes.status === 200 &&\n        indexAlertValue.status === 200\n      ) {\n        let oneDayIndex = [];\n        this.indexValues = indexValues.data;\n        this.indexAlertValue = indexAlertValue.data;\n        const date = this.currentDate.replace(/-/g, \"\");\n        indexValues.data.forEach(indexItem => {\n          // 如果时间日期和当前日期一样\n          if (indexItem.date.toString() === date) {\n            oneDayIndex.push(indexItem);\n          }\n        });\n        // 首页指标数据\n        const allIndexes = indexes.data;\n        allIndexes.push({ name: \"全区\", id: \"ZS\", children: [] });\n        // 指标预警以及临界值\n        const allIndexesAlertValue = indexAlertValue.data;\n        oneDayIndex.forEach(item => {\n          // 全区综合值 进入街道页面初始化\n          if (item.indexId === \"ZS\") {\n            this.allDistrictValue = item;\n          }\n          for (let index = 0; index < allIndexes.length; index++) {\n            const firstLevelItem = allIndexes[index];\n            if (firstLevelItem.id === item.indexId) {\n              // 每天对应的值\n              firstLevelItem.value = item[gridId];\n              // 预警值以及临界值以及预警显示条件\n              for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                  // 预警值\n                  firstLevelItem.alertValue =\n                    allIndexesAlertValue[i].alertValue;\n                  firstLevelItem.alertJudge =\n                    // 预警显示条件\n                    allIndexesAlertValue[i].alertJudge;\n                  // 临界值1\n                  firstLevelItem.criticalValue1 =\n                    allIndexesAlertValue[i].criticalValue1;\n                  // 临界值2\n                  firstLevelItem.criticalValue2 =\n                    allIndexesAlertValue[i].criticalValue2;\n                  // 临界值3\n                  firstLevelItem.criticalValue3 =\n                    allIndexesAlertValue[i].criticalValue3;\n                  // 临界值判断条件\n                  firstLevelItem.explainJudge =\n                    allIndexesAlertValue[i].explainJudge;\n                  // 最大值\n                  firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue;\n                  // 最小值\n                  firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                }\n              }\n              break;\n            } else {\n              if (item.indexId.indexOf(firstLevelItem.id) != -1) {\n                for (\n                  let secondIndex = 0;\n                  secondIndex < firstLevelItem.children.length;\n                  secondIndex++\n                ) {\n                  const secondLevelIndex = firstLevelItem.children[secondIndex];\n                  if (secondLevelIndex.id === item.indexId) {\n                    secondLevelIndex.value = item[gridId];\n\n                    // 预警值以及临界值以及预警显示条件\n                    for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                      if (secondLevelIndex.id === allIndexesAlertValue[i].id) {\n                        // 预警值\n                        secondLevelIndex.alertValue =\n                          allIndexesAlertValue[i].alertValue;\n                        secondLevelIndex.alertJudge =\n                          // 预警显示条件\n                          allIndexesAlertValue[i].alertJudge;\n                        // 临界值1\n                        secondLevelIndex.criticalValue1 =\n                          allIndexesAlertValue[i].criticalValue1;\n                        // 临界值2\n                        secondLevelIndex.criticalValue2 =\n                          allIndexesAlertValue[i].criticalValue2;\n                        // 临界值3\n                        secondLevelIndex.criticalValue3 =\n                          allIndexesAlertValue[i].criticalValue3;\n                        // 临界值判断条件\n                        secondLevelIndex.explainJudge =\n                          allIndexesAlertValue[i].explainJudge;\n                        // 最大值\n                        secondLevelIndex.maxValue =\n                          allIndexesAlertValue[i].maxValue;\n                        // 最小值\n                        secondLevelIndex.minValue =\n                          allIndexesAlertValue[i].minValue;\n                      }\n                    }\n                    break;\n                  } else {\n                    for (\n                      let thirdIndex = 0;\n                      thirdIndex < secondLevelIndex.children.length;\n                      thirdIndex++\n                    ) {\n                      const thirdLevelIndex =\n                        secondLevelIndex.children[thirdIndex];\n                      if (thirdLevelIndex.id === item.indexId) {\n                        thirdLevelIndex.value = item[gridId];\n                        for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (\n                            thirdLevelIndex.id === allIndexesAlertValue[i].id\n                          ) {\n                            // 预警值\n                            thirdLevelIndex.alertValue =\n                              allIndexesAlertValue[i].alertValue;\n                            thirdLevelIndex.alertJudge =\n                              // 预警显示条件\n                              allIndexesAlertValue[i].alertJudge;\n                            // 临界值1\n                            thirdLevelIndex.criticalValue1 =\n                              allIndexesAlertValue[i].criticalValue1;\n                            // 临界值2\n                            thirdLevelIndex.criticalValue2 =\n                              allIndexesAlertValue[i].criticalValue2;\n                            // 临界值3\n                            thirdLevelIndex.criticalValue3 =\n                              allIndexesAlertValue[i].criticalValue3;\n                            // 临界值判断条件\n                            thirdLevelIndex.explainJudge =\n                              allIndexesAlertValue[i].explainJudge;\n                            // 最大值\n                            thirdLevelIndex.maxValue =\n                              allIndexesAlertValue[i].maxValue;\n                            // 最小值\n                            thirdLevelIndex.minValue =\n                              allIndexesAlertValue[i].minValue;\n                          }\n                        }\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n        // 第一层指数属性\n        this.firstLevelIndex = allIndexes;\n        this.isEchartsShow = true;\n        // 第二层指数\n        // eslint-disable-next-line\n        this.secondLevelIndex = this.firstLevelIndex[\n          this.currentFirstLevel === \"\" ? 0 : this.currentFirstLevel\n        ].children;\n      }\n    },\n    // echarts事件 根据时间的变化而数据变化\n    showDayData(instance) {\n      // 当前点击的时间\n      let dayDate = instance.name;\n      this.currentDate = dayDate;\n      this.$store.state.barInfo = {};\n      this.queryAllIndexValue();\n      this.queryTrendDataOfTimeSpan(this.indexId);\n\n      EventBus.$emit(\"clearLayerStyle\");\n    },\n    // 获取指标综合评价\n    queryJudge() {},\n    // 获取指标综合排名\n    queryOrder() {},\n    // 获取指标综合预警\n    queryAlerts() {},\n    // 获取一年时间内的数据变化情况 获取折线图的x,y\n    queryTrendDataOfTimeSpan(indexId) {\n      const xData = [];\n      const yData = [];\n      this.indexId = indexId;\n      this.indexValues.forEach(indexValueItem => {\n        if (indexValueItem.indexId === indexId) {\n          xData.push(indexValueItem.date);\n          yData.push(indexValueItem[this.currentGridId]);\n        }\n        if (\n          indexValueItem.indexId === indexId &&\n          this.currentDate == indexValueItem.date\n        ) {\n          // 当天街道的数据\n          this.streetsData = indexValueItem;\n          // 字段显示的值\n          this.indexValue = indexValueItem[this.currentGridId];\n          let indexRanking = this.computeValue(indexValueItem);\n          // this.indexRankingData = indexRanking.slice(0, 5);\n          this.indexRankingData = indexRanking;\n        }\n      });\n      const allIndexesAlertValue = this.indexAlertValue;\n      for (let i = 0; i < allIndexesAlertValue.length; i++) {\n        if (indexId === allIndexesAlertValue[i].id) {\n          // 值\n          // 临界值1\n          this.criticalValue1 = allIndexesAlertValue[i].criticalValue1;\n          // 临界值2\n          this.criticalValue2 = allIndexesAlertValue[i].criticalValue2;\n          // 临界值3\n          this.criticalValue3 = allIndexesAlertValue[i].criticalValue3;\n          this.explainJudge = allIndexesAlertValue[i].explainJudge;\n          // 最大值\n          this.maxValue = allIndexesAlertValue[i].maxValue;\n          // 最小值\n          this.minValue = allIndexesAlertValue[i].minValue;\n        }\n      }\n      this.lineDataX = xData;\n      this.lineDataY = yData;\n      // 计算平均值\n      let averageValue = Number(\n        ((eval(this.lineDataY.join(\"+\")) / this.lineDataY.length) * 100) / 100\n      ).toFixed(2);\n      this.averageValue = averageValue;\n    },\n    //返回指定范围随机数\n    rn(min, max) {\n      let n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    // 计算进入街道页面的街道排名\n    computeValue(indexValueItem) {\n      const streetName = [];\n      const streetValue = [];\n      const checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n      for (let key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n      let rankingData = streetName.map((key, index) => {\n        return [key, streetValue[index]];\n      });\n      // 计算排名\n      let mapped = rankingData.map(function(ar, i) {\n        return { value: ar[1], index: i }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function(a, b) {\n        return b.value - a.value;\n      });\n      // 将三个undefined转换为对应的字段\n      let result = mapped.map(function(key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (\n            rankingData[key.index][1].toString().indexOf(\".\") == -1 &&\n            rankingData[key.index][1].length == 8\n          ) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n        return rankingData[key.index];\n      });\n      // 计算排名保留\n      let indexRanking = [];\n      result.map(key => {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    }\n  },\n  watch: {\n    // eslint-disable-next-line\n    $route(to, from) {\n      this.indicatorsShow = false;\n      this.showOverview = true;\n      this.showGridview = false;\n      this.fristLevelIndex = \"\";\n      this.currentFirstLevel = \"\";\n      this.$store.state.barInfo = {};\n      EventBus.$emit(\"clearLayerStyle\");\n      // 如果是街道页面\n      // if (this.gridType === \"street\") {\n      //   this.currentFirstLevel = 0;\n      //   const defaultStreet = { gridId: 110101010, gridName: \"和平里街道\" };\n      //   this.showIndexDetail(defaultStreet);\n      // }\n    },\n    // 进入街道全区的所以数据显示\n    allDistrictValue(val, oldVal) {\n      if (this.gridType === \"street\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          this.streetsData = this.allDistrictValue;\n          this.indexValue = this.streetsData[1101010];\n          let gridJudgeRanking = this.computeValue(this.allDistrictValue);\n          // 计算平均值\n          let streetData = [];\n          streetData = gridJudgeRanking.map(item => {\n            return item[1];\n          });\n          let averageValue = Number(\n            ((eval(streetData.join(\"+\")) / streetData.length) * 100) / 100\n          ).toFixed(2);\n          this.averageValue = averageValue;\n          this.streetData = gridJudgeRanking;\n          this.gridJudgeRankingData = gridJudgeRanking;\n          this.maxValue = this.firstLevelIndex[4].maxValue;\n          this.minValue = this.firstLevelIndex[4].minValue;\n          this.lineAlertValue = this.firstLevelIndex[4].alertValue;\n          this.alertJudge = this.firstLevelIndex[4].alertJudge;\n          this.criticalValue1 = this.firstLevelIndex[4].criticalValue1;\n          this.criticalValue2 = this.firstLevelIndex[4].criticalValue2;\n          this.criticalValue3 = this.firstLevelIndex[4].criticalValue3;\n          this.explainJudge = this.firstLevelIndex[4].explainJudge;\n          this.indicatorsShow = true;\n        }\n      } else if (this.gridType === \"community\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          console.log(\"社区\");\n        }\n      } else if (this.gridType === \"grid\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          console.log(\"基础网格\");\n        }\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.basisGrid {\n  width: 100%;\n  height: calc(100vh - 3.6rem);\n  padding-top: 0.1rem;\n  .mapArcgis {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 11;\n  }\n  .floating-layer {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    .currentDate {\n      position: absolute;\n      z-index: 1002;\n      display: flex;\n      align-content: center;\n      font-size: 12px;\n      font-weight: bolder;\n      color: #000;\n      font-weight: bold;\n      justify-content: center;\n      left: 15%;\n      top: 2%;\n      span {\n        margin-left: 0.4rem;\n      }\n      .timer-icon {\n        display: inline-block;\n        width: 20px;\n        height: 20px;\n        // background: url(\"../assets/img/status/timer.png\") no-repeat center;\n        background-size: contain;\n      }\n    }\n    .basis-content {\n      width: 100%;\n      height: 100%;\n\n      .dateSelector {\n        position: absolute;\n        z-index: 22;\n        width: 100%;\n        // left: 0%;\n        // bottom: 0rem;\n        top: 1rem;\n        z-index: 99;\n        .selector {\n          display: flex;\n          width: 100%;\n          line-height: 3rem;\n          padding: 0 2rem;\n          .beginDate {\n            width: 10rem;\n          }\n          .endDate {\n            width: 10rem;\n            line-height: 3rem;\n            margin-left: 1rem;\n          }\n          .slider {\n            width: 100%;\n          }\n        }\n      }\n      &:after {\n        content: \"\";\n        display: block;\n        clear: both;\n      }\n      .bc-left-right {\n        overflow: auto;\n        position: relative;\n        height: 100%;\n        width: 18rem;\n        float: right;\n        z-index: 100;\n        background: rgba(71, 90, 109, 1);\n        opacity: 0.8;\n        .search {\n          margin: 0.5rem 0.5rem;\n        }\n        .parameter {\n          background: rgba(71, 90, 109, 0.75);\n          margin: 0rem 0.3rem;\n          margin-top: 0.5rem;\n          // overflow-y: scroll;\n          // overflow-x: scroll;\n          overflow: auto;\n          .index {\n            width: 100%;\n            margin-bottom: 1rem;\n            .index-top {\n              height: 2rem;\n              line-height: 2rem;\n              vertical-align: middle;\n              background: #3a404e;\n              .left {\n                padding-left: 0.5rem;\n              }\n              .right {\n                float: right;\n                margin-right: 1rem;\n              }\n            }\n            .index-content {\n              font-size: 14px;\n              padding: 1rem;\n              background: #242c3b;\n              span {\n                font-size: 16px;\n                font-weight: 600;\n                color: #ffc000;\n                margin: 0 0.2rem;\n              }\n            }\n          }\n        }\n      }\n      .bc-left-left {\n        overflow: auto;\n        position: relative;\n        height: 100%;\n        width: 18rem;\n        float: left;\n        z-index: 100;\n        background: rgba(71, 90, 109, 1);\n        opacity: 0.8;\n        .indicators-list {\n          height: 100%;\n          width: 18rem;\n          background: rgba(16, 41, 67, 0.9);\n          float: left;\n          opacity: 0.9;\n          overflow: scroll;\n          -webkit-overflow-scrolling: touch;\n          .index-title {\n            height: 3rem;\n            width: 100%;\n            cursor: pointer;\n            display: flex;\n            font-size: 14px;\n            justify-content: center;\n            align-items: center;\n          }\n          .index-content {\n            width: 100%;\n            padding-bottom: 0.5rem;\n            margin: 0.5rem 0;\n            // padding-right: 10rem;\n            // margin: 0 0.5rem 0.5rem;\n            // background: rgba(16, 41, 67, 1);\n            .isEqBackground {\n              background: #102943 !important;\n            }\n            .content {\n              padding: 0.3rem 0.5rem;\n              background: rgba(62, 83, 101, 0.9);\n              border-radius: 5px;\n              display: flex;\n              align-items: center;\n              justify-content: space-between;\n              &:after {\n                content: \"\";\n                display: block;\n                clear: both;\n                visibility: hidden;\n              }\n\n              .content-left {\n                flex-grow: 1;\n                display: flex;\n                align-items: center;\n                // justify-content: space-between;\n                justify-items: center;\n                cursor: pointer;\n                .ranking-number {\n                  width: 18px;\n                  height: 18px;\n                  background: rgba(124, 181, 225, 1);\n                  border-radius: 5px;\n                  text-align: center;\n                  line-height: 18px;\n                }\n                .trends {\n                  margin-left: 0.5rem;\n                  color: #ffc000;\n                }\n                .name {\n                  text-align: center;\n                  vertical-align: middle;\n                  font-weight: bold;\n                  margin-left: 0.5rem;\n                }\n              }\n              .content-right {\n                // flex-grow: 1;\n                // font-size: 16px;\n                color: #ffff;\n                text-align: right;\n                margin-right: 0.5rem;\n                // margin-top: -0.3rem;\n              }\n            }\n            .isSelectedSecond {\n              box-shadow: 0px 0px 5px 2px #236ca6;\n            }\n            .system {\n              width: 90%;\n              margin: 0.5rem 0.5rem;\n              padding: 0.3rem 0.5rem;\n              background-color: rgba(62, 83, 101, 0.3);\n              &:after {\n                content: \"\";\n                display: block;\n                clear: both;\n              }\n              .content-left {\n                cursor: pointer;\n                float: left;\n                margin-right: 0.2rem;\n              }\n              .content-right {\n                float: right;\n                margin-right: 0.5rem;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  .broken-line {\n    height: 10rem;\n    width: calc(100vw - 36rem);\n    position: absolute;\n    left: 50%;\n    bottom: 12%;\n    -webkit-transform: translate(-50%, 0%);\n    -moz-transform: translate(-50%, 0%);\n    transform: translate(-50%, 0%);\n    float: left;\n    z-index: 90;\n    .isSelected {\n      color: #28a8e0;\n    }\n    .line-title {\n      height: 2rem;\n      line-height: 2rem;\n      vertical-align: middle;\n      margin-bottom: 1rem;\n      background: rgba(16, 41, 67, 0.8);\n      border: 1px solid rgba(147, 147, 147, 0.8);\n      border-radius: 8px 8px 0px 0px;\n      margin: 0 0.5rem;\n      .title-left {\n        cursor: pointer;\n        margin-left: 1rem;\n        font-size: 1rem;\n      }\n      .title-nowtime {\n        margin-left: 2rem;\n      }\n      .title-right {\n        float: right;\n        margin-right: 1rem;\n      }\n    }\n    .line-echarts {\n      height: 14rem;\n      margin: 0 0.5rem;\n      background: rgba(16, 41, 67, 0.8);\n      border: 1px solid rgba(147, 147, 147, 0.8);\n      border-top: none;\n    }\n  }\n}\n</style>\n<style lang=\"scss\">\n.basisGrid {\n  .ivu-input {\n    background: rgba(16, 41, 67, 0.75);\n    border: 1px solid rgba(147, 147, 147, 0.75);\n  }\n  .slider {\n    .ivu-slider {\n      .ivu-slider-wrap {\n        width: 100%;\n        height: 4px;\n        margin: 16px 0;\n        background-color: #e2f0ff;\n        border-radius: 3px;\n        vertical-align: middle;\n        position: relative;\n        cursor: pointer;\n      }\n      // 拖动覆盖进度条\n      .ivu-slider-bar {\n        height: 4px;\n        background: linear-gradient(to right, #82ace8, #55c0ee);\n        border-radius: 3px;\n        position: absolute;\n      }\n      // 拖动按钮\n      .ivu-slider-button-wrap {\n        width: 18px;\n        height: 18px;\n        text-align: center;\n        background-color: transparent;\n        position: absolute;\n        top: -5px;\n        transform: translateX(-50%);\n        .ivu-slider-button {\n          width: 12px;\n          height: 12px;\n          border: 4px solid #83ade9;\n          border-radius: 50%;\n          background-color: #fff;\n          transition: all 0.2s linear;\n          outline: 0;\n        }\n      }\n    }\n  }\n}\n</style>\n"]}]}