{"remainingRequest":"/Users/heyuanpeng/个人项目/grid/node_modules/babel-loader/lib/index.js!/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/grid/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/grid/src/views/Home.vue","mtime":1586942496847},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/babel-loader/lib/index.js","mtime":1586942665794},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js","mtime":1573543948284}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/grid/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/grid/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n\nvar _name$components$data;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport ExponentialModule from \"@/components/exponentialModule.vue\";\nimport CircleRing from \"@/components/circleRing.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport Portal from \"@/components/Portal.vue\"; // eslint-disable-next-line\n\nimport EventBus from \"../utils/EventBus\";\nexport default (_name$components$data = {\n  name: \"Home\",\n  components: {\n    IEcharts: IEcharts,\n    ExponentialModule: ExponentialModule,\n    CircleRing: CircleRing,\n    bottomMap: bottomMap,\n    headerNavigation: headerNavigation,\n    Portal: Portal\n  },\n  data: function data() {\n    return {\n      explainIsShow: true,\n      // 是否显示全区指标说明按钮\n      nowIndexId: \"\",\n      //当前点击的id,用于柱状图事件切换数据\n      baseUrl: process.env.BASE_URL,\n      listLeftData: \"\",\n      listRightData: \"\",\n      timeData: [[\"2018-1-1\", 0], [\"2018-12-31\", 350], 1],\n      // 时间数据数组,三级联动和折线图\n      allDistrictData: \"\",\n      // 全区的所有时间指标数据\n      allDistrictAlertValue: \"\",\n      // 全区的预警值\n      alertValue: 0.1,\n      // 预警线的值\n      dateList: \"\",\n      // echartsX坐标的时间\n      oneDaySpan: 0,\n      // 时间对应的下标\n      allEvluations: [// 所有指标数据,初始化\n      {}],\n      prevPercentValue: \"\",\n      oneDaySpanMax: 364,\n      // 时间数组的长度\n      isShowMapModal: false,\n      // 是否显示地图渲染层\n      mapTabList: [\"街道\", \"社区\", \"基础网格\"],\n      clickedTabItem: \"街道\",\n      // 当前被点击的tabItem,\n      gridType: \"street\",\n      gridsAlert: [],\n      // 网格的数据,名称和值\n      totalValueByDate: [],\n      // 所有属性按时间分类的街道数据\n      indexValueByDate: [],\n      // 筛选后的属性按时间分类的指定时间的街道数据\n      streetsGeoJson: {},\n      // 街道的geojson\n      streetsData: {},\n      // 传递给地图的geojson\n      indexAlertData: [],\n      // 每个属性的专属值\n      // 属性的临界值\n      criticalValue1: \"\",\n      // 临界值1\n      criticalValue2: \"\",\n      // 临界值2\n      criticalValue3: \"\",\n      // 临界值3\n      explainJudge: \"\",\n      // 临界值判断条件\n      allDistrictAlert: {},\n      // 全区对应的预警值\n      allDistrictExpain: {},\n      // 全区对应的说明\n      isShowChart: true,\n      streetRanking: [],\n      //全区指数对应的街道排名\n      alertJudge: \"\",\n      MapModalParams: \"\"\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    // this.queryStreetsData();\n    this.queryAllIndexAlertData();\n    this.queryAllIndexValue().then(function () {\n      _this.queryAllIndexValueByDate();\n    });\n  },\n  computed: {\n    // 折线图\n    line: function line() {\n      var _this2 = this;\n\n      var color = \"\";\n\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n\n      var pieces = [{\n        gt: 0,\n        lt: 1\n      }];\n\n      if (this.alertJudge === \"low\") {\n        pieces = [{\n          gte: 0,\n          lt: Number(this.alertValue),\n          color: \"red\"\n        }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{\n          gte: Number(this.alertValue),\n          lt: 100,\n          color: \"red\"\n        }];\n      } else {\n        pieces = [{\n          gt: 0,\n          lt: 1\n        }];\n      }\n\n      var data = this.timeData;\n      var dateList = data.map(function (item) {\n        return item[0];\n      });\n      /* eslint-disable */\n\n      this.dateList = dateList;\n      var valueList = data.map(function (item) {\n        return item[1];\n      });\n      var option = {\n        // Make gradient line here\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n        title: [{\n          top: \"55%\",\n          left: \"center\",\n          text: \"\"\n        }],\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\"\n          },\n          formatter: function formatter(params) {\n            var date = params[0].axisValue;\n            var color = params[0].color;\n            var data = params[0].data;\n            var year = date.slice(0, 4);\n            var month = date.slice(4, 6);\n            var day = date.slice(6, 8);\n            return \"\".concat(year, \"\\u5E74\").concat(month, \"\\u6708\").concat(day, \"\\u65E5</br><span style=\\\"background:\").concat(color, \";border-radius:50%;width:10px;height:10px;display:inline-block\\\"></span>&nbsp;\").concat(data, \"\\n          \");\n          }\n        },\n        xAxis: [{\n          type: \"category\",\n          data: dateList,\n          gridIndex: 1,\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          }\n        }],\n        yAxis: [{\n          splitLine: {\n            show: false\n          },\n          gridIndex: 1,\n          scale: true,\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          }\n        }],\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: {\n              type: [\"line\", \"bar\"]\n            }\n          },\n          right: \"3%\"\n        },\n        grid: [{\n          bottom: \"10%\",\n          top: \"1%\",\n          // right: \"25%\",\n          containLabel: true\n        }, {\n          x: \"5%\",\n          y: \"5%\",\n          x2: \"7%\",\n          y2: \"10%\"\n        }, {\n          height: \"100%\"\n        }],\n        dataZoom: [{\n          type: \"slider\",\n          //图表下方的伸缩条\n          show: false,\n          //是否显示\n          realtime: true,\n          //\n          start: 0,\n          //伸缩条开始位置（1-100），可以随时更改\n          end: 100 //伸缩条结束位置（1-100），可以随时更改\n\n        }, {\n          type: \"inside\",\n          //鼠标滚轮\n          realtime: true\n        }],\n        series: [{\n          type: \"line\",\n          showSymbol: true,\n          data: valueList,\n          itemStyle: {\n            normal: {\n              color: function color(params) {\n                if (_this2.explainJudge === \"forward\") {\n                  return \"#D24A53\";\n                } else {\n                  return \"#FFD6A0\";\n                }\n              },\n              lineStyle: {// color: color\n              }\n            }\n          },\n          markLine: {\n            symbol: \"none\",\n            precision: 2,\n            silent: true,\n            itemStyle: {\n              normal: {}\n            },\n            data: [{\n              type: \"average\",\n              name: \"平均值\",\n              lineStyle: {\n                color: \"#3FFCFD\"\n              },\n              label: {\n                show: true,\n                position: \"end\",\n                formatter: \"{b}:{c}\"\n              }\n            }, {\n              name: \"预警线\",\n              yAxis: this.alertValue,\n              lineStyle: {\n                color: \"#F92E2A\"\n              },\n              label: {\n                show: true,\n                position: \"end\",\n                formatter: \"{b}:{c}\"\n              }\n            }]\n          }\n        }]\n      };\n      return option;\n    },\n    // 全街道柱状图\n    bar: function bar() {\n      var data = this.streetRanking;\n      var dataX = data.map(function (item) {\n        return item[0];\n      });\n      var dataY = data.map(function (item) {\n        return item[1];\n      });\n      var endPercent = 100;\n\n      if (this.gridType === \"street\") {\n        endPercent = 100;\n      } else {\n        endPercent = 30 / dataX.length * 100;\n      }\n\n      var option = {\n        // visualMap: [\n        //   {\n        //     show: false,\n        //     type: \"continuous\",\n        //     seriesIndex: 0,\n        //     dimension: 0,\n        //     min: 0,\n        //     max: 10\n        //   }\n        // ],\n        color: \"#78B1DD\",\n        tooltip: {\n          trigger: \"axis\"\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: {\n              type: [\"line\", \"bar\"]\n            },\n            onClick: function onClick() {\n              console.log(111);\n            }\n          },\n          right: \"3%\"\n        },\n        dataZoom: [//给x轴设置滚动条\n        {\n          start: 0,\n          //默认为0\n          end: endPercent,\n          type: \"slider\",\n          show: false,\n          handleSize: 0,\n          //滑动条的 左右2个滑动条的大小\n          backgroundColor: \"#ddd\",\n          //两边未选中的滑动条区域的颜色\n          showDataShadow: false,\n          //是否显示数据阴影 默认auto\n          showDetail: false //即拖拽时候是否显示详细数值信息 默认true\n\n        }, //下面这个属性是里面拖到\n        {\n          type: \"inside\",\n          show: false,\n          start: 0,\n          //默认为1\n          end: 100\n        }],\n        grid: [{\n          bottom: \"10%\",\n          top: \"10%\",\n          left: \"4%\",\n          right: \"2%\"\n        }],\n        xAxis: [{\n          type: \"category\",\n          triggerEvent: true,\n          data: dataX,\n          axisLine: {\n            color: \"#fff\"\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            },\n            interval: 0\n          }\n        }],\n        yAxis: [{\n          type: \"value\",\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          }\n        }],\n        series: [{\n          name: \"街道\",\n          type: \"bar\",\n          data: dataY\n        }]\n      };\n      return option;\n    },\n    // 圆环中心的值\n    percentValue: function percentValue() {\n      // 保证异步拿到数据后再渲染\n      if (this.allEvluations.length > 1) {\n        if (this.oneDaySpanMax >= 1) {\n          this.prevPercentValue = this.allEvluations[0].timeData[this.oneDaySpanMax - 1].value.toFixed(2);\n        } else {\n          this.prevPercentValue = 1;\n        }\n\n        return this.allEvluations[0].timeData[this.oneDaySpanMax].value.toFixed(2);\n      }\n    },\n    // 目前系统的时间\n    currentDayDate: function currentDayDate() {\n      if (this.allEvluations.length > 1) {\n        return this.formatTime(this.allEvluations[0].timeData[this.oneDaySpanMax].date);\n      }\n    },\n    propsConfig: function propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        alertValue: this.alertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexValue: \"\",\n        streetsData: this.indexValueByDate\n      };\n    }\n  },\n  mounted: function mounted() {\n    this.getGridsAlert();\n  },\n  methods: {\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert: function getGridsAlert() {\n      var _this3 = this;\n\n      this.$http(\"\".concat(this.baseUrl, \"/static/gridsAlerts.json\")).then(function (result) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = result.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var grids = _step.value;\n            grids[0] = \"网格\" + _this3.rn(1, 10);\n            grids[1] = _this3.rn(0, 15);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (result.data) _this3.gridsAlert = result.data;\n      });\n    },\n    // 获取街道的geojson\n    // async queryStreetsData() {\n    //   const streetsGeoUrl = `${this.baseUrl}/static/streets.json`;\n    //   const res = await this.$http.get(streetsGeoUrl);\n    //   this.streetsGeoJson = res.data;\n    // },\n    // 获取所有属性的专属特性-临界值\n    queryAllIndexAlertData: function () {\n      var _queryAllIndexAlertData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var indexAlertDataUrl, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                indexAlertDataUrl = \"\".concat(this.baseUrl, \"/static/indexAlertValue.json\");\n                _context.next = 3;\n                return this.$http.get(indexAlertDataUrl);\n\n              case 3:\n                res = _context.sent;\n                this.indexAlertData = res.data;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function queryAllIndexAlertData() {\n        return _queryAllIndexAlertData.apply(this, arguments);\n      };\n    }(),\n    // 获取所有指标对应每天的所有街道的数据\n    queryAllIndexValueByDate: function () {\n      var _queryAllIndexValueByDate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var indexValueUrl, res, currentDate, streetDataByDate;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                indexValueUrl = \"\";\n\n                if (this.gridType === \"street\") {\n                  indexValueUrl = \"\".concat(this.baseUrl, \"/static/indexvalue.json\");\n                } else if (this.gridType === \"community\") {\n                  indexValueUrl = \"\".concat(this.baseUrl, \"/static/communityValue.json\");\n                } else if (this.gridType === \"grid\") {\n                  indexValueUrl = \"\".concat(this.baseUrl, \"/static/communityValue.json\");\n                }\n\n                _context2.next = 4;\n                return this.$http.get(indexValueUrl);\n\n              case 4:\n                res = _context2.sent;\n                this.totalValueByDate = res.data; // 进入全区的初次街道排名\n\n                currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax].date;\n                streetDataByDate = this.totalValueByDate.filter(function (item) {\n                  return Number(item.date) === currentDate;\n                }).filter(function (item) {\n                  return item.indexId === \"ZS\";\n                })[0]; // 计算街道排名\n\n                this.streetRanking = this.computeValue(streetDataByDate);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function queryAllIndexValueByDate() {\n        return _queryAllIndexValueByDate.apply(this, arguments);\n      };\n    }(),\n    queryAllIndexValue: function () {\n      var _queryAllIndexValue = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var indexSystemUrl, indexEvaluation, districtAlertUrl, districtExplainUrl, indexes, evaluationData, districtAlertData, districtExplainData, allIndexes, allEvluations, allIndexesAlertValue, districtExplainValue;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                indexSystemUrl = \"\".concat(this.baseUrl, \"/static/signsIndex.json\"); // 全区指标值\n\n                indexEvaluation = \"\".concat(this.baseUrl, \"/static/indexEvaluation.json\"); // 全区预警判断条件以及临界值\n\n                districtAlertUrl = \"\".concat(this.baseUrl, \"/static/districtAlertValue.json\"); // 全区评价说明解释\n\n                districtExplainUrl = \"\".concat(this.baseUrl, \"/static/districtExplain.json\");\n                _context3.next = 6;\n                return this.$http.get(indexSystemUrl);\n\n              case 6:\n                indexes = _context3.sent;\n                _context3.next = 9;\n                return this.$http.get(indexEvaluation);\n\n              case 9:\n                evaluationData = _context3.sent;\n                _context3.next = 12;\n                return this.$http.get(districtAlertUrl);\n\n              case 12:\n                districtAlertData = _context3.sent;\n                _context3.next = 15;\n                return this.$http.get(districtExplainUrl);\n\n              case 15:\n                districtExplainData = _context3.sent;\n                allIndexes = indexes.data;\n                allEvluations = evaluationData.data;\n                allIndexesAlertValue = districtAlertData.data;\n                districtExplainValue = districtExplainData.data;\n\n                if (indexes.status === 200 && evaluationData.status === 200) {\n                  this.listLeftData = allIndexes.slice(0, 2).reverse();\n                  this.listRightData = allIndexes.slice(-2); // FIXME: 需要优化的地方 对系统时间的处理和全区最后一个值得处理\n                  // 全区圆环所需要的数据\n\n                  this.allDistrictData = allEvluations[0].timeData;\n                  this.allDistrictAlert = allIndexesAlertValue.filter(function (item) {\n                    return item.id === \"ZS\";\n                  })[0];\n                  this.allDistrictExpain = districtExplainValue.filter(function (item) {\n                    return item.id === \"ZS\";\n                  })[0]; // 进入系统后折线图显示全区的值\n\n                  this.linkage(allEvluations[0].timeData, this.allDistrictAlert.alertValue, this.allDistrictAlert.explainJudge, this.allDistrictAlert.alertJudge); // 显示全区的街道排名\n                  // 将每个指标对应的值放到对应的指标\n\n                  allEvluations.forEach(function (item) {\n                    for (var index = 0; index < allIndexes.length; index++) {\n                      var firstLevelItem = allIndexes[index];\n\n                      if (firstLevelItem.id === item.id) {\n                        firstLevelItem.time = item.timeData; // firstLevelItem.alertValue = item.alertValue;\n                        // 添加判断是低于还是高于显示预警的判断\n                        // if (firstLevelItem.id == \"ZS2\" || firstLevelItem.id == \"ZS3\") {\n                        //   firstLevelItem.alertJudge = \"low\";\n                        // } else {\n                        //   firstLevelItem.alertJudge = \"high\";\n                        // }\n                        // 预警值以及临界值以及预警显示条件\n\n                        for (var i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                            // 预警值\n                            firstLevelItem.alertValue = allIndexesAlertValue[i].alertValue;\n                            firstLevelItem.alertJudge = // 预警显示条件\n                            allIndexesAlertValue[i].alertJudge; // 临界值1\n\n                            firstLevelItem.criticalValue1 = allIndexesAlertValue[i].criticalValue1; // 临界值2\n\n                            firstLevelItem.criticalValue2 = allIndexesAlertValue[i].criticalValue2; // 临界值3\n\n                            firstLevelItem.criticalValue3 = allIndexesAlertValue[i].criticalValue3; // 临界值判断条件\n\n                            firstLevelItem.explainJudge = allIndexesAlertValue[i].explainJudge; // 最大值\n\n                            firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue; // 最小值\n\n                            firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                          } // 评价说明\n\n\n                          if (firstLevelItem.id === districtExplainValue[i].id) {\n                            firstLevelItem.meaning = districtExplainValue[i].meaning;\n                            firstLevelItem.mode = districtExplainValue[i].mode;\n                          }\n                        }\n\n                        break;\n                      } else {\n                        if (item.id.indexOf(firstLevelItem.id) != -1) {\n                          for (var secondIndex = 0; secondIndex < firstLevelItem.children.length; secondIndex++) {\n                            var secondLevelIndex = firstLevelItem.children[secondIndex];\n\n                            if (secondLevelIndex.id === item.id) {\n                              secondLevelIndex.time = item.timeData;\n\n                              for (var _i = 0; _i < allIndexesAlertValue.length; _i++) {\n                                if (secondLevelIndex.id === allIndexesAlertValue[_i].id) {\n                                  // 预警值\n                                  secondLevelIndex.alertValue = allIndexesAlertValue[_i].alertValue;\n                                  secondLevelIndex.alertJudge = // 预警显示条件\n                                  allIndexesAlertValue[_i].alertJudge; // 临界值1\n\n                                  secondLevelIndex.criticalValue1 = allIndexesAlertValue[_i].criticalValue1; // 临界值2\n\n                                  secondLevelIndex.criticalValue2 = allIndexesAlertValue[_i].criticalValue2; // 临界值3\n\n                                  secondLevelIndex.criticalValue3 = allIndexesAlertValue[_i].criticalValue3; // 临界值判断条件\n\n                                  secondLevelIndex.explainJudge = allIndexesAlertValue[_i].explainJudge; // 最大值\n\n                                  secondLevelIndex.maxValue = allIndexesAlertValue[_i].maxValue; // 最小值\n\n                                  secondLevelIndex.minValue = allIndexesAlertValue[_i].minValue;\n                                }\n\n                                if (secondLevelIndex.id === districtExplainValue[_i].id) {\n                                  secondLevelIndex.meaning = districtExplainValue[_i].meaning;\n                                  secondLevelIndex.mode = districtExplainValue[_i].mode;\n                                }\n                              }\n\n                              break;\n                            } else {\n                              for (var thirdIndex = 0; thirdIndex < secondLevelIndex.children.length; thirdIndex++) {\n                                var thirdLevelIndex = secondLevelIndex.children[thirdIndex];\n\n                                if (thirdLevelIndex.id === item.id) {\n                                  thirdLevelIndex.time = item.timeData;\n                                  thirdLevelIndex.value = item.timeData[0].value;\n\n                                  for (var _i2 = 0; _i2 < allIndexesAlertValue.length; _i2++) {\n                                    if (thirdLevelIndex.id === allIndexesAlertValue[_i2].id) {\n                                      // 预警值\n                                      thirdLevelIndex.alertValue = allIndexesAlertValue[_i2].alertValue;\n                                      thirdLevelIndex.alertJudge = // 预警显示条件\n                                      allIndexesAlertValue[_i2].alertJudge; // 临界值1\n\n                                      thirdLevelIndex.criticalValue1 = allIndexesAlertValue[_i2].criticalValue1; // 临界值2\n\n                                      thirdLevelIndex.criticalValue2 = allIndexesAlertValue[_i2].criticalValue2; // 临界值3\n\n                                      thirdLevelIndex.criticalValue3 = allIndexesAlertValue[_i2].criticalValue3; // 临界值判断条件\n\n                                      thirdLevelIndex.explainJudge = allIndexesAlertValue[_i2].explainJudge; // 最大值\n\n                                      thirdLevelIndex.maxValue = allIndexesAlertValue[_i2].maxValue; // 最小值\n\n                                      thirdLevelIndex.minValue = allIndexesAlertValue[_i2].minValue;\n                                    }\n\n                                    if (thirdLevelIndex.id === districtExplainValue[_i2].id) {\n                                      thirdLevelIndex.meaning = districtExplainValue[_i2].meaning;\n                                      thirdLevelIndex.mode = districtExplainValue[_i2].mode;\n                                    }\n                                  }\n\n                                  break;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  });\n                  this.allEvluations = allEvluations;\n                } else {\n                  this.$Message.error(\"数据请求失败\");\n                }\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function queryAllIndexValue() {\n        return _queryAllIndexValue.apply(this, arguments);\n      };\n    }(),\n    // echarts 根据时间的变化而数据变化\n    showDayData: function showDayData(event) {\n      // 当前点击的时间\n      var dayDate = event.name;\n\n      for (var i = 0; i < this.dateList.length; i++) {\n        if (dayDate === this.dateList[i].toString()) {\n          this.oneDaySpanMax = i;\n        }\n      }\n    },\n    // echarts 柱状图点击事件\n    showStreetPage: function showStreetPage(instance) {\n      var nextStreet = {};\n      var nextStreetName = instance.name || instance.value;\n      var nextStreetData = instance.data;\n\n      for (var key in this.$store.state.allStreetNameCode) {\n        if (nextStreetName === this.$store.state.allStreetNameCode[key]) {\n          nextStreet.gridId = key;\n          nextStreet.gridName = nextStreetName;\n        }\n      }\n\n      if (this.gridType === \"street\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: {\n            gridType: \"street\",\n            nextStreet: nextStreet\n          }\n        });\n      } else if (this.gridType === \"community\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: {\n            gridType: \"community\",\n            nextStreet: nextStreet\n          }\n        });\n      } else if (this.gridType === \"grid\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: {\n            gridType: \"grid\",\n            nextStreet: nextStreet\n          }\n        });\n      }\n    },\n    // 是否显示地图modal\n    handleMapModal: function handleMapModal(params) {\n      this.MapModalParams = params;\n      this.isShowMapModal = params.status; // this.gridType = \"street\";\n      // this.clickedTabItem = \"街道\";\n\n      if (params.status) {\n        var currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax].date;\n        var indexId = params.data.id;\n        this.indexValueByDate = this.totalValueByDate.filter(function (item) {\n          return Number(item.date) === currentDate;\n        }).filter(function (item) {\n          return item.indexId === indexId;\n        })[0]; // this.streetsGeoJson.features.forEach((geoItem, index) => {\n        //   geoItem.properties.gridValue = mapData[geoItem.properties.jdcode];\n        // });\n        // 获取当前属性的临界值\n\n        var indexAlertValue = this.indexAlertData.filter(function (item) {\n          return item.id === indexId;\n        })[0];\n        this.criticalValue1 = indexAlertValue.criticalValue1;\n        this.criticalValue2 = indexAlertValue.criticalValue2;\n        this.criticalValue3 = indexAlertValue.criticalValue3;\n        this.alertValue = indexAlertValue.alertValue;\n        this.alertJudge = indexAlertValue.alertJudge;\n        this.explainJudge = indexAlertValue.explainJudge;\n      }\n    },\n    // 显示折线图\n    linkage: function linkage(timeData, alertValue, explainJudge, alertJudge) {\n      this.alertValue = alertValue;\n      this.explainJudge = explainJudge;\n      this.alertJudge = alertJudge;\n      var timeArr = []; // 时间数组\n\n      var timeValue = []; // 每个时间对应的数据\n\n      timeData.map(function (item) {\n        timeArr.push(item.date);\n        timeValue.push(item.value);\n      }); // 转换为二维数组\n\n      this.timeData = timeArr.map(function (key, value) {\n        return [key, timeValue[value]];\n      });\n    },\n    // 显示柱状图\n    showBarStreet: function showBarStreet(indexId) {\n      this.nowIndexId = indexId; // 根据事件和id获取对应的街道的值\n\n      var currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax].date;\n      var streetDataByDate = this.totalValueByDate.filter(function (item) {\n        return Number(item.date) === currentDate;\n      }).filter(function (item) {\n        return item.indexId === indexId;\n      })[0]; // 计算街道排名\n\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    // 计算排名\n    computeValue: function computeValue(indexValueItem) {\n      var streetName = [];\n      var streetValue = [];\n      var checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n\n      for (var key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n\n      var rankingData = streetName.map(function (key, index) {\n        return [key, streetValue[index]];\n      }); // 计算排名\n\n      var mapped = rankingData.map(function (ar, i) {\n        return {\n          value: ar[1],\n          index: i\n        }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function (a, b) {\n        return b.value - a.value;\n      }); // 将三个undefined转换为对应的字段\n\n      var result = mapped.map(function (key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (rankingData[key.index][1].toString().indexOf(\".\") == -1 && rankingData[key.index][1].length == 8) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n\n        return rankingData[key.index];\n      }); // 计算排名保留\n\n      var indexRanking = [];\n      result.map(function (key) {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    },\n    // 显示一级指标高亮\n    showActiveFrist: function showActiveFrist() {\n      this.$store.state.indicatorIndex = \"一\"; // 清空当前界面上的高亮效果\n\n      this.$store.state.leftExponentail.currentFirstLevel = \"\";\n      this.$store.state.leftExponentail.currentSecondLevel = \"\";\n      this.$store.state.leftExponentail.currenThridLevel = \"\";\n      this.$store.state.rightExponentail.currentFirstLevel = \"\";\n      this.$store.state.rightExponentail.currentSecondLevel = \"\";\n      this.$store.state.rightExponentail.currenThridLevel = \"\";\n    },\n    // 格式化时间\n    formatTime: function formatTime(time) {\n      time = time.toString();\n      time = time.slice(0, 4) + \"年\" + time.slice(4, 6) + \"月\" + time.slice(6, 8) + \"日\";\n      return time;\n    },\n    //返回指定范围随机数\n    rn: function rn(min, max) {\n      var n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    handleMapTab: function handleMapTab(item) {\n      this.clickedTabItem = item;\n\n      switch (item) {\n        case \"街道\":\n          this.gridType = \"street\";\n          break;\n\n        case \"社区\":\n          this.gridType = \"community\";\n          break;\n\n        case \"基础网格\":\n          this.gridType = \"grid\";\n          break;\n\n        default:\n      }\n    }\n  }\n}, _defineProperty(_name$components$data, \"mounted\", function mounted() {\n  // 将组件保存到vuex中\n  this.$store.state.leftExponentail = this.$refs.leftExponentail;\n  this.$store.state.rightExponentail = this.$refs.rightExponentail;\n}), _defineProperty(_name$components$data, \"watch\", {\n  oneDaySpanMax: function oneDaySpanMax() {\n    this.showBarStreet(this.nowIndexId);\n  },\n  gridType: function gridType() {\n    var _this4 = this;\n\n    this.queryAllIndexValueByDate().then(function () {\n      _this4.handleMapModal(_this4.MapModalParams);\n    });\n  }\n}), _name$components$data);",{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"home\">\n    <!-- 浮动层 -->\n    <!-- 浮动层 -->\n    <div class=\"floating-layer\">\n      <!-- 中间内容 -->\n      <!-- 指标总览 -->\n      <div class=\"evaluation-nav\">\n        <span class=\"nav\">指标总览</span>\n        <p>\n          <span class=\"color-good\">健康</span>\n        </p>\n        <p>\n          <span class=\"color-notgood\">良好</span>\n        </p>\n        <p>\n          <span class=\"color-general\">一般</span>\n        </p>\n        <p>\n          <span class=\"color-risk\">可能存在风险</span>\n        </p>\n        <p>\n          <span class=\"color-alert\">预警</span>\n        </p>\n      </div>\n      <div class=\"assess\">\n        <div class=\"assess-content\">\n          <div class=\"a-left\">\n            <ExponentialModule\n              ref=\"leftExponentail\"\n              :listData=\"listLeftData\"\n              :state=\"0\"\n              :oneDaySpanMax=\"oneDaySpanMax\"\n              @showMapModal=\"handleMapModal\"\n              @showBarStreet=\"showBarStreet\"\n              @linkage=\"linkage\"\n            ></ExponentialModule>\n          </div>\n          <div class=\"a-center\">\n            <div class=\"time\">\n              <!-- <span class=\"timer-icon\"></span> -->\n              <span>{{currentDayDate}}</span>\n            </div>\n            <!-- 圆环组件 -->\n            <CircleRing\n              :percent=\"percentValue\"\n              :prevPercentValue=\"prevPercentValue\"\n              :allDistrictAlert=\"allDistrictAlert\"\n              :allDistrictExpain=\"allDistrictExpain\"\n              :explainIsShow=\"explainIsShow\"\n            ></CircleRing>\n            <div class=\"number\">\n              <div\n                class=\"number-text\"\n                @mouseover=\"explainIsShow=true\"\n                @click=\"linkage(allDistrictData,allDistrictAlert.alertValue,allDistrictAlert.explainJudge,allDistrictAlert.alertJudge);showActiveFrist();showBarStreet('ZS')\"\n              >网格运行指数</div>\n            </div>\n          </div>\n          <div class=\"a-right\">\n            <ExponentialModule\n              ref=\"rightExponentail\"\n              :listData=\"listRightData\"\n              :state=\"1\"\n              :oneDaySpanMax=\"oneDaySpanMax\"\n              @showMapModal=\"handleMapModal\"\n              @showBarStreet=\"showBarStreet\"\n              @linkage=\"linkage\"\n            ></ExponentialModule>\n          </div>\n        </div>\n      </div>\n      <!-- 折线图 -->\n      <div class=\"broken-line\">\n        <div class=\"line-title\">\n          <span\n            class=\"title-left\"\n            :class=\"{isSelected:isShowChart}\"\n            @click=\"isShowChart = true\"\n          >{{clickedTabItem}}综合排名</span>&nbsp;\n          <span\n            class=\"title-left\"\n            :class=\"{isSelected:!isShowChart}\"\n            @click=\"isShowChart = false\"\n          >全区综合评价值</span>\n          <span class=\"title-right arrow-yellow-up\">{{this.$store.state.indicatorIndex}}级指标</span>\n        </div>\n        <div class=\"line-echarts\" v-show=\"isShowChart\">\n          <IEcharts :option=\"bar\" :resizable=\"true\" :notMerge=\"true\" @click=\"showStreetPage\"></IEcharts>\n        </div>\n        <div class=\"line-echarts\" v-show=\"!isShowChart\">\n          <IEcharts :option=\"line\" :resizable=\"true\" :notMerge=\"true\" @click=\"showDayData\"></IEcharts>\n        </div>\n      </div>\n    </div>\n    <!-- 地图数据渲染层 -->\n    <div class=\"map-modal\" v-if=\"isShowMapModal\">\n      <Icon\n        class=\"close-icon\"\n        type=\"md-close-circle\"\n        size=\"20\"\n        @click=\"handleMapModal({status:false, data:{}})\"\n      />\n      <div class=\"map-container\">\n        <div class=\"container-header\">\n          <div\n            class=\"tab-item\"\n            v-for=\"(tabItem, index) in mapTabList\"\n            :key=\"index\"\n            :class=\"{'tab-active':clickedTabItem === tabItem}\"\n            @click=\"handleMapTab(tabItem)\"\n          >{{tabItem}}</div>\n        </div>\n        <div class=\"container-main\">\n          <bottomMap\n            ref=\"mapNode\"\n            :gridType=\"gridType\"\n            :gridsAlert=\"gridsAlert\"\n            :propsConfig=\"propsConfig\"\n          ></bottomMap>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport ExponentialModule from \"@/components/exponentialModule.vue\";\nimport CircleRing from \"@/components/circleRing.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport Portal from \"@/components/Portal.vue\";\n\n// eslint-disable-next-line\nimport EventBus from \"../utils/EventBus\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    IEcharts,\n    ExponentialModule,\n    CircleRing,\n    bottomMap,\n    headerNavigation,\n    Portal\n  },\n  data() {\n    return {\n      explainIsShow: true, // 是否显示全区指标说明按钮\n      nowIndexId: \"\", //当前点击的id,用于柱状图事件切换数据\n      baseUrl: process.env.BASE_URL,\n      listLeftData: \"\",\n      listRightData: \"\",\n      timeData: [[\"2018-1-1\", 0], [\"2018-12-31\", 350], 1], // 时间数据数组,三级联动和折线图\n      allDistrictData: \"\", // 全区的所有时间指标数据\n      allDistrictAlertValue: \"\", // 全区的预警值\n      alertValue: 0.1, // 预警线的值\n      dateList: \"\", // echartsX坐标的时间\n      oneDaySpan: 0, // 时间对应的下标\n      allEvluations: [\n        // 所有指标数据,初始化\n        {}\n      ],\n      prevPercentValue: \"\",\n      oneDaySpanMax: 364, // 时间数组的长度\n      isShowMapModal: false, // 是否显示地图渲染层\n      mapTabList: [\"街道\", \"社区\", \"基础网格\"],\n      clickedTabItem: \"街道\", // 当前被点击的tabItem,\n      gridType: \"street\",\n      gridsAlert: [], // 网格的数据,名称和值\n      totalValueByDate: [], // 所有属性按时间分类的街道数据\n      indexValueByDate: [], // 筛选后的属性按时间分类的指定时间的街道数据\n      streetsGeoJson: {}, // 街道的geojson\n      streetsData: {}, // 传递给地图的geojson\n      indexAlertData: [], // 每个属性的专属值\n      // 属性的临界值\n      criticalValue1: \"\", // 临界值1\n      criticalValue2: \"\", // 临界值2\n      criticalValue3: \"\", // 临界值3\n      explainJudge: \"\", // 临界值判断条件\n      allDistrictAlert: {}, // 全区对应的预警值\n      allDistrictExpain: {}, // 全区对应的说明\n      isShowChart: true,\n      streetRanking: [], //全区指数对应的街道排名\n      alertJudge: \"\",\n      MapModalParams: \"\"\n    };\n  },\n  created() {\n    // this.queryStreetsData();\n    this.queryAllIndexAlertData();\n    this.queryAllIndexValue().then(() => {\n      this.queryAllIndexValueByDate();\n    });\n  },\n  computed: {\n    // 折线图\n    line() {\n      let color = \"\";\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n      let pieces = [{ gt: 0, lt: 1 }];\n      if (this.alertJudge === \"low\") {\n        pieces = [{ gte: 0, lt: Number(this.alertValue), color: \"red\" }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{ gte: Number(this.alertValue), lt: 100, color: \"red\" }];\n      } else {\n        pieces = [{ gt: 0, lt: 1 }];\n      }\n      let data = this.timeData;\n      let dateList = data.map(function(item) {\n        return item[0];\n      });\n      /* eslint-disable */\n      this.dateList = dateList;\n      let valueList = data.map(function(item) {\n        return item[1];\n      });\n      let option = {\n        // Make gradient line here\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n\n        title: [\n          {\n            top: \"55%\",\n            left: \"center\",\n            text: \"\"\n          }\n        ],\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\"\n          },\n          formatter: function(params) {\n            const date = params[0].axisValue;\n            const color = params[0].color;\n            const data = params[0].data;\n            const year = date.slice(0, 4);\n            const month = date.slice(4, 6);\n            const day = date.slice(6, 8);\n            return `${year}年${month}月${day}日</br><span style=\"background:${color};border-radius:50%;width:10px;height:10px;display:inline-block\"></span>&nbsp;${data}\n          `;\n          }\n        },\n        xAxis: [\n          {\n            type: \"category\",\n            data: dateList,\n            gridIndex: 1,\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        yAxis: [\n          {\n            splitLine: { show: false },\n            gridIndex: 1,\n            scale: true,\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: { type: [\"line\", \"bar\"] }\n          },\n          right: \"3%\"\n        },\n        grid: [\n          {\n            bottom: \"10%\",\n            top: \"1%\",\n            // right: \"25%\",\n            containLabel: true\n          },\n          {\n            x: \"5%\",\n            y: \"5%\",\n            x2: \"7%\",\n            y2: \"10%\"\n          },\n          {\n            height: \"100%\"\n          }\n        ],\n        dataZoom: [\n          {\n            type: \"slider\", //图表下方的伸缩条\n            show: false, //是否显示\n            realtime: true, //\n            start: 0, //伸缩条开始位置（1-100），可以随时更改\n            end: 100 //伸缩条结束位置（1-100），可以随时更改\n          },\n          {\n            type: \"inside\", //鼠标滚轮\n            realtime: true\n          }\n        ],\n        series: [\n          {\n            type: \"line\",\n            showSymbol: true,\n            data: valueList,\n            itemStyle: {\n              normal: {\n                color: params => {\n                  if (this.explainJudge === \"forward\") {\n                    return \"#D24A53\";\n                  } else {\n                    return \"#FFD6A0\";\n                  }\n                },\n                lineStyle: {\n                  // color: color\n                }\n              }\n            },\n            markLine: {\n              symbol: \"none\",\n              precision: 2,\n              silent: true,\n              itemStyle: {\n                normal: {}\n              },\n              data: [\n                {\n                  type: \"average\",\n                  name: \"平均值\",\n                  lineStyle: {\n                    color: \"#3FFCFD\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                },\n                {\n                  name: \"预警线\",\n                  yAxis: this.alertValue,\n                  lineStyle: {\n                    color: \"#F92E2A\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      };\n      return option;\n    },\n    // 全街道柱状图\n    bar() {\n      const data = this.streetRanking;\n      let dataX = data.map(item => {\n        return item[0];\n      });\n      let dataY = data.map(item => {\n        return item[1];\n      });\n      let endPercent = 100;\n      if (this.gridType === \"street\") {\n        endPercent = 100;\n      } else {\n        endPercent = (30 / dataX.length) * 100;\n      }\n      let option = {\n        // visualMap: [\n        //   {\n        //     show: false,\n        //     type: \"continuous\",\n        //     seriesIndex: 0,\n        //     dimension: 0,\n        //     min: 0,\n        //     max: 10\n        //   }\n        // ],\n        color: \"#78B1DD\",\n        tooltip: {\n          trigger: \"axis\"\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            magicType: { type: [\"line\", \"bar\"] },\n            onClick: function() {\n              console.log(111);\n            }\n          },\n          right: \"3%\"\n        },\n        dataZoom: [\n          //给x轴设置滚动条\n          {\n            start: 0, //默认为0\n            end: endPercent,\n            type: \"slider\",\n            show: false,\n            handleSize: 0, //滑动条的 左右2个滑动条的大小\n            backgroundColor: \"#ddd\", //两边未选中的滑动条区域的颜色\n            showDataShadow: false, //是否显示数据阴影 默认auto\n            showDetail: false //即拖拽时候是否显示详细数值信息 默认true\n          },\n          //下面这个属性是里面拖到\n          {\n            type: \"inside\",\n            show: false,\n            start: 0, //默认为1\n            end: 100\n          }\n        ],\n        grid: [\n          {\n            bottom: \"10%\",\n            top: \"10%\",\n            left: \"4%\",\n            right: \"2%\"\n          }\n        ],\n        xAxis: [\n          {\n            type: \"category\",\n            triggerEvent: true,\n            data: dataX,\n            axisLine: {\n              color: \"#fff\"\n            },\n\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              },\n              interval: 0\n            }\n          }\n        ],\n        yAxis: [\n          {\n            type: \"value\",\n            splitLine: { show: false },\n            axisLabel: {\n              show: true,\n              textStyle: {\n                color: \"#fff\"\n              }\n            }\n          }\n        ],\n        series: [\n          {\n            name: \"街道\",\n            type: \"bar\",\n            data: dataY\n          }\n        ]\n      };\n      return option;\n    },\n    // 圆环中心的值\n    percentValue() {\n      // 保证异步拿到数据后再渲染\n      if (this.allEvluations.length > 1) {\n        if (this.oneDaySpanMax >= 1) {\n          this.prevPercentValue = this.allEvluations[0].timeData[\n            this.oneDaySpanMax - 1\n          ].value.toFixed(2);\n        } else {\n          this.prevPercentValue = 1;\n        }\n        return this.allEvluations[0].timeData[this.oneDaySpanMax].value.toFixed(\n          2\n        );\n      }\n    },\n    // 目前系统的时间\n    currentDayDate() {\n      if (this.allEvluations.length > 1) {\n        return this.formatTime(\n          this.allEvluations[0].timeData[this.oneDaySpanMax].date\n        );\n      }\n    },\n    propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        alertValue: this.alertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexValue: \"\",\n        streetsData: this.indexValueByDate\n      };\n    }\n  },\n  mounted() {\n    this.getGridsAlert();\n  },\n  methods: {\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert() {\n      this.$http(`${this.baseUrl}/static/gridsAlerts.json`).then(result => {\n        for (let grids of result.data) {\n          grids[0] = \"网格\" + this.rn(1, 10);\n          grids[1] = this.rn(0, 15);\n        }\n        if (result.data) this.gridsAlert = result.data;\n      });\n    },\n    // 获取街道的geojson\n    // async queryStreetsData() {\n    //   const streetsGeoUrl = `${this.baseUrl}/static/streets.json`;\n    //   const res = await this.$http.get(streetsGeoUrl);\n    //   this.streetsGeoJson = res.data;\n    // },\n    // 获取所有属性的专属特性-临界值\n    async queryAllIndexAlertData() {\n      const indexAlertDataUrl = `${this.baseUrl}/static/indexAlertValue.json`;\n      const res = await this.$http.get(indexAlertDataUrl);\n      this.indexAlertData = res.data;\n    },\n    // 获取所有指标对应每天的所有街道的数据\n    async queryAllIndexValueByDate() {\n      let indexValueUrl = \"\";\n      if (this.gridType === \"street\") {\n        indexValueUrl = `${this.baseUrl}/static/indexvalue.json`;\n      } else if (this.gridType === \"community\") {\n        indexValueUrl = `${this.baseUrl}/static/communityValue.json`;\n      } else if (this.gridType === \"grid\") {\n        indexValueUrl = `${this.baseUrl}/static/communityValue.json`;\n      }\n      const res = await this.$http.get(indexValueUrl);\n      this.totalValueByDate = res.data;\n      // 进入全区的初次街道排名\n      const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n        .date;\n      let streetDataByDate = this.totalValueByDate\n        .filter(item => Number(item.date) === currentDate)\n        .filter(item => item.indexId === \"ZS\")[0];\n      // 计算街道排名\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    async queryAllIndexValue() {\n      const indexSystemUrl = `${this.baseUrl}/static/signsIndex.json`;\n      // 全区指标值\n      const indexEvaluation = `${this.baseUrl}/static/indexEvaluation.json`;\n      // 全区预警判断条件以及临界值\n      const districtAlertUrl = `${this.baseUrl}/static/districtAlertValue.json`;\n      // 全区评价说明解释\n      const districtExplainUrl = `${this.baseUrl}/static/districtExplain.json`;\n      let indexes = await this.$http.get(indexSystemUrl);\n      let evaluationData = await this.$http.get(indexEvaluation);\n      let districtAlertData = await this.$http.get(districtAlertUrl);\n      let districtExplainData = await this.$http.get(districtExplainUrl);\n      const allIndexes = indexes.data;\n      const allEvluations = evaluationData.data;\n      const allIndexesAlertValue = districtAlertData.data;\n      const districtExplainValue = districtExplainData.data;\n\n      if (indexes.status === 200 && evaluationData.status === 200) {\n        this.listLeftData = allIndexes.slice(0, 2).reverse();\n        this.listRightData = allIndexes.slice(-2);\n        // FIXME: 需要优化的地方 对系统时间的处理和全区最后一个值得处理\n        // 全区圆环所需要的数据\n        this.allDistrictData = allEvluations[0].timeData;\n        this.allDistrictAlert = allIndexesAlertValue.filter(\n          item => item.id === \"ZS\"\n        )[0];\n        this.allDistrictExpain = districtExplainValue.filter(\n          item => item.id === \"ZS\"\n        )[0];\n        // 进入系统后折线图显示全区的值\n        this.linkage(\n          allEvluations[0].timeData,\n          this.allDistrictAlert.alertValue,\n          this.allDistrictAlert.explainJudge,\n          this.allDistrictAlert.alertJudge\n        );\n        // 显示全区的街道排名\n        // 将每个指标对应的值放到对应的指标\n\n        allEvluations.forEach(item => {\n          for (let index = 0; index < allIndexes.length; index++) {\n            const firstLevelItem = allIndexes[index];\n            if (firstLevelItem.id === item.id) {\n              firstLevelItem.time = item.timeData;\n              // firstLevelItem.alertValue = item.alertValue;\n              // 添加判断是低于还是高于显示预警的判断\n              // if (firstLevelItem.id == \"ZS2\" || firstLevelItem.id == \"ZS3\") {\n              //   firstLevelItem.alertJudge = \"low\";\n              // } else {\n              //   firstLevelItem.alertJudge = \"high\";\n              // }\n              // 预警值以及临界值以及预警显示条件\n              for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                  // 预警值\n                  firstLevelItem.alertValue =\n                    allIndexesAlertValue[i].alertValue;\n                  firstLevelItem.alertJudge =\n                    // 预警显示条件\n                    allIndexesAlertValue[i].alertJudge;\n                  // 临界值1\n                  firstLevelItem.criticalValue1 =\n                    allIndexesAlertValue[i].criticalValue1;\n                  // 临界值2\n                  firstLevelItem.criticalValue2 =\n                    allIndexesAlertValue[i].criticalValue2;\n                  // 临界值3\n                  firstLevelItem.criticalValue3 =\n                    allIndexesAlertValue[i].criticalValue3;\n                  // 临界值判断条件\n                  firstLevelItem.explainJudge =\n                    allIndexesAlertValue[i].explainJudge;\n                  // 最大值\n                  firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue;\n                  // 最小值\n                  firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                }\n                // 评价说明\n                if (firstLevelItem.id === districtExplainValue[i].id) {\n                  firstLevelItem.meaning = districtExplainValue[i].meaning;\n                  firstLevelItem.mode = districtExplainValue[i].mode;\n                }\n              }\n              break;\n            } else {\n              if (item.id.indexOf(firstLevelItem.id) != -1) {\n                for (\n                  let secondIndex = 0;\n                  secondIndex < firstLevelItem.children.length;\n                  secondIndex++\n                ) {\n                  const secondLevelIndex = firstLevelItem.children[secondIndex];\n                  if (secondLevelIndex.id === item.id) {\n                    secondLevelIndex.time = item.timeData;\n                    for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                      if (secondLevelIndex.id === allIndexesAlertValue[i].id) {\n                        // 预警值\n                        secondLevelIndex.alertValue =\n                          allIndexesAlertValue[i].alertValue;\n                        secondLevelIndex.alertJudge =\n                          // 预警显示条件\n                          allIndexesAlertValue[i].alertJudge;\n                        // 临界值1\n                        secondLevelIndex.criticalValue1 =\n                          allIndexesAlertValue[i].criticalValue1;\n                        // 临界值2\n                        secondLevelIndex.criticalValue2 =\n                          allIndexesAlertValue[i].criticalValue2;\n                        // 临界值3\n                        secondLevelIndex.criticalValue3 =\n                          allIndexesAlertValue[i].criticalValue3;\n                        // 临界值判断条件\n                        secondLevelIndex.explainJudge =\n                          allIndexesAlertValue[i].explainJudge;\n                        // 最大值\n                        secondLevelIndex.maxValue =\n                          allIndexesAlertValue[i].maxValue;\n                        // 最小值\n                        secondLevelIndex.minValue =\n                          allIndexesAlertValue[i].minValue;\n                      }\n                      if (secondLevelIndex.id === districtExplainValue[i].id) {\n                        secondLevelIndex.meaning =\n                          districtExplainValue[i].meaning;\n                        secondLevelIndex.mode = districtExplainValue[i].mode;\n                      }\n                    }\n\n                    break;\n                  } else {\n                    for (\n                      let thirdIndex = 0;\n                      thirdIndex < secondLevelIndex.children.length;\n                      thirdIndex++\n                    ) {\n                      const thirdLevelIndex =\n                        secondLevelIndex.children[thirdIndex];\n                      if (thirdLevelIndex.id === item.id) {\n                        thirdLevelIndex.time = item.timeData;\n                        thirdLevelIndex.value = item.timeData[0].value;\n                        for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (\n                            thirdLevelIndex.id === allIndexesAlertValue[i].id\n                          ) {\n                            // 预警值\n                            thirdLevelIndex.alertValue =\n                              allIndexesAlertValue[i].alertValue;\n                            thirdLevelIndex.alertJudge =\n                              // 预警显示条件\n                              allIndexesAlertValue[i].alertJudge;\n                            // 临界值1\n                            thirdLevelIndex.criticalValue1 =\n                              allIndexesAlertValue[i].criticalValue1;\n                            // 临界值2\n                            thirdLevelIndex.criticalValue2 =\n                              allIndexesAlertValue[i].criticalValue2;\n                            // 临界值3\n                            thirdLevelIndex.criticalValue3 =\n                              allIndexesAlertValue[i].criticalValue3;\n                            // 临界值判断条件\n                            thirdLevelIndex.explainJudge =\n                              allIndexesAlertValue[i].explainJudge;\n                            // 最大值\n                            thirdLevelIndex.maxValue =\n                              allIndexesAlertValue[i].maxValue;\n                            // 最小值\n                            thirdLevelIndex.minValue =\n                              allIndexesAlertValue[i].minValue;\n                          }\n                          if (\n                            thirdLevelIndex.id === districtExplainValue[i].id\n                          ) {\n                            thirdLevelIndex.meaning =\n                              districtExplainValue[i].meaning;\n                            thirdLevelIndex.mode = districtExplainValue[i].mode;\n                          }\n                        }\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n        this.allEvluations = allEvluations;\n      } else {\n        this.$Message.error(\"数据请求失败\");\n      }\n    },\n\n    // echarts 根据时间的变化而数据变化\n    showDayData(event) {\n      // 当前点击的时间\n      let dayDate = event.name;\n      for (let i = 0; i < this.dateList.length; i++) {\n        if (dayDate === this.dateList[i].toString()) {\n          this.oneDaySpanMax = i;\n        }\n      }\n    },\n    // echarts 柱状图点击事件\n    showStreetPage(instance) {\n      let nextStreet = {};\n      let nextStreetName = instance.name || instance.value;\n      let nextStreetData = instance.data;\n      for (let key in this.$store.state.allStreetNameCode) {\n        if (nextStreetName === this.$store.state.allStreetNameCode[key]) {\n          nextStreet.gridId = key;\n          nextStreet.gridName = nextStreetName;\n        }\n      }\n      if (this.gridType === \"street\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"street\", nextStreet }\n        });\n      } else if (this.gridType === \"community\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"community\", nextStreet }\n        });\n      } else if (this.gridType === \"grid\") {\n        this.$router.push({\n          name: \"BasicGrid\",\n          params: { gridType: \"grid\", nextStreet }\n        });\n      }\n    },\n    // 是否显示地图modal\n    handleMapModal(params) {\n      this.MapModalParams = params;\n      this.isShowMapModal = params.status;\n      // this.gridType = \"street\";\n      // this.clickedTabItem = \"街道\";\n      if (params.status) {\n        const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n          .date;\n        const indexId = params.data.id;\n        this.indexValueByDate = this.totalValueByDate\n          .filter(item => Number(item.date) === currentDate)\n          .filter(item => item.indexId === indexId)[0];\n        // this.streetsGeoJson.features.forEach((geoItem, index) => {\n        //   geoItem.properties.gridValue = mapData[geoItem.properties.jdcode];\n        // });\n        // 获取当前属性的临界值\n        const indexAlertValue = this.indexAlertData.filter(\n          item => item.id === indexId\n        )[0];\n        this.criticalValue1 = indexAlertValue.criticalValue1;\n        this.criticalValue2 = indexAlertValue.criticalValue2;\n        this.criticalValue3 = indexAlertValue.criticalValue3;\n        this.alertValue = indexAlertValue.alertValue;\n        this.alertJudge = indexAlertValue.alertJudge;\n        this.explainJudge = indexAlertValue.explainJudge;\n      }\n    },\n    // 显示折线图\n    linkage(timeData, alertValue, explainJudge, alertJudge) {\n      this.alertValue = alertValue;\n      this.explainJudge = explainJudge;\n      this.alertJudge = alertJudge;\n      const timeArr = []; // 时间数组\n      const timeValue = []; // 每个时间对应的数据\n      timeData.map(function(item) {\n        timeArr.push(item.date);\n        timeValue.push(item.value);\n      });\n      // 转换为二维数组\n      this.timeData = timeArr.map((key, value) => [key, timeValue[value]]);\n    },\n    // 显示柱状图\n    showBarStreet(indexId) {\n      this.nowIndexId = indexId;\n      // 根据事件和id获取对应的街道的值\n      const currentDate = this.allEvluations[0].timeData[this.oneDaySpanMax]\n        .date;\n      let streetDataByDate = this.totalValueByDate\n        .filter(item => Number(item.date) === currentDate)\n        .filter(item => item.indexId === indexId)[0];\n      // 计算街道排名\n      this.streetRanking = this.computeValue(streetDataByDate);\n    },\n    // 计算排名\n    computeValue(indexValueItem) {\n      const streetName = [];\n      const streetValue = [];\n      const checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n      for (let key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n      let rankingData = streetName.map((key, index) => {\n        return [key, streetValue[index]];\n      });\n      // 计算排名\n      let mapped = rankingData.map(function(ar, i) {\n        return { value: ar[1], index: i }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function(a, b) {\n        return b.value - a.value;\n      });\n      // 将三个undefined转换为对应的字段\n      let result = mapped.map(function(key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (\n            rankingData[key.index][1].toString().indexOf(\".\") == -1 &&\n            rankingData[key.index][1].length == 8\n          ) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n        return rankingData[key.index];\n      });\n      // 计算排名保留\n      let indexRanking = [];\n      result.map(key => {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    },\n    // 显示一级指标高亮\n    showActiveFrist() {\n      this.$store.state.indicatorIndex = \"一\";\n      // 清空当前界面上的高亮效果\n      this.$store.state.leftExponentail.currentFirstLevel = \"\";\n      this.$store.state.leftExponentail.currentSecondLevel = \"\";\n      this.$store.state.leftExponentail.currenThridLevel = \"\";\n      this.$store.state.rightExponentail.currentFirstLevel = \"\";\n      this.$store.state.rightExponentail.currentSecondLevel = \"\";\n      this.$store.state.rightExponentail.currenThridLevel = \"\";\n    },\n    // 格式化时间\n    formatTime(time) {\n      time = time.toString();\n      time =\n        time.slice(0, 4) +\n        \"年\" +\n        time.slice(4, 6) +\n        \"月\" +\n        time.slice(6, 8) +\n        \"日\";\n      return time;\n    },\n    //返回指定范围随机数\n    rn(min, max) {\n      var n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    handleMapTab(item) {\n      this.clickedTabItem = item;\n      switch (item) {\n        case \"街道\":\n          this.gridType = \"street\";\n          break;\n        case \"社区\":\n          this.gridType = \"community\";\n          break;\n        case \"基础网格\":\n          this.gridType = \"grid\";\n          break;\n        default:\n      }\n    }\n  },\n  mounted() {\n    // 将组件保存到vuex中\n    this.$store.state.leftExponentail = this.$refs.leftExponentail;\n    this.$store.state.rightExponentail = this.$refs.rightExponentail;\n  },\n  watch: {\n    oneDaySpanMax() {\n      this.showBarStreet(this.nowIndexId);\n    },\n    gridType() {\n      this.queryAllIndexValueByDate().then(() => {\n        this.handleMapModal(this.MapModalParams);\n      });\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n// 深度作用选择器,将父组件的样式渗透到子组件\n#{\"/deep/\"} .trend_arrow {\n  width: 10px;\n  height: 10px;\n  display: inline-block !important;\n  background-size: contain;\n  // transform: translateX(0.6rem);\n}\n#{\"/deep/\"} .trend_arrow_red {\n  background: url(\"../assets/img/status/downred.svg\") no-repeat center;\n}\n#{\"/deep/\"} .trend_arrow_blue {\n  background: url(\"../assets/img/status/upblue.svg\") no-repeat center;\n}\n#{\"/deep/\"} .trend_arrow_yellow {\n  background: url(\"../assets/img/status/yellow.svg\") no-repeat center;\n}\n.swiper-slide {\n  height: 100vh;\n  font-size: 18px;\n  color: #fff;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  background-color: transparent !important;\n  justify-content: space-around !important;\n  background-size: 100% 100%;\n  z-index: 100;\n}\n.arrow-yellow-up:after {\n  content: \"\";\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n  border-bottom: 12px solid #ffff02;\n  display: inline-block;\n  transform: translateX(0.5rem);\n}\n.home {\n  background: #384457 url(\"../assets/img/status/background.png\") no-repeat;\n  // background: #012134;\n  background-size: 100% 100%;\n  width: 100%;\n  height: calc(100vh - 3.6rem);\n  overflow: hidden;\n  position: relative;\n  .map-modal {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 23;\n    background: rgba(0, 0, 0, 0.8);\n    padding: 5rem;\n    .close-icon {\n      position: absolute;\n      right: 1rem;\n      top: 1rem;\n      cursor: pointer;\n    }\n    .close-icon:hover {\n      color: #3dc5c4;\n    }\n    .map-container {\n      width: 100%;\n      height: 100%;\n      .container-header {\n        width: 100%;\n        height: 3rem;\n        background: #012134;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        .tab-item {\n          height: 2.2rem;\n          line-height: 2.2rem;\n          font-size: 14px;\n          font-weight: 800;\n          padding: 0 1.5rem;\n          margin-right: 1rem;\n          border-radius: 0.3rem;\n          cursor: pointer;\n        }\n        .tab-active {\n          background: #143b6b;\n        }\n      }\n      .container-main {\n        width: 100%;\n        height: calc(100% - 3rem);\n        background: RGBA(1, 28, 40, 0.8);\n      }\n    }\n  }\n  .floating-layer {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 22;\n    .evaluation-nav {\n      width: 40%;\n      display: flex;\n      flex-wrap: nowrap;\n      justify-content: space-around;\n      justify-items: center;\n      margin: 1rem;\n      margin-bottom: 0;\n      span {\n        display: inline-block;\n        text-align: center;\n      }\n      .nav {\n        width: 79px;\n        height: 20px;\n        font-size: 16px;\n        font-family: PingFang-SC-Bold;\n        font-weight: bold;\n        color: rgba(255, 255, 255, 1);\n      }\n      .color-good {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #2a7804;\n        border-radius: 12px;\n      }\n      .color-notgood {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #047878;\n        border-radius: 12px;\n      }\n      .color-general {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #f7d307;\n        border-radius: 12px;\n      }\n      .color-risk {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #f7a307;\n        border-radius: 12px;\n      }\n      .color-alert {\n        width: 80px;\n        height: 24px;\n        line-height: 24px;\n        background: #f71b07;\n        border-radius: 12px;\n      }\n    }\n    .assess {\n      height: 30rem;\n      width: 100%;\n      overflow-x: hidden;\n      overflow-y: scroll;\n      .assess-content {\n        margin: 1rem 3rem;\n        display: flex;\n        justify-content: space-between;\n        justify-items: center;\n        .a-left,\n        .a-right {\n          flex: 2.5;\n        }\n        .a-center {\n          position: relative;\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          justify-content: start;\n          align-items: center;\n          margin-top: 2.5rem;\n          .time {\n            text-align: center;\n            display: flex;\n            font-size: 8px;\n            font-weight: bolder;\n            color: #fff;\n            position: absolute;\n            bottom: 30%;\n            span {\n              margin-left: 0.4rem;\n              font-size: 5px;\n            }\n            .timer-icon {\n              display: inline-block;\n              width: 20px;\n              height: 20px;\n              background: url(\"../assets/img/status/timer.png\") no-repeat center;\n              background-size: contain;\n            }\n          }\n          .number {\n            position: absolute;\n            bottom: 10%;\n            width: 40%;\n            height: 2.5rem;\n            background: #7cb5e1;\n            border-radius: 5px;\n            line-height: 2.5rem;\n            vertical-align: middle;\n            text-align: center;\n            margin: 2rem auto;\n            .number-text {\n              font-weight: bold;\n              cursor: pointer;\n            }\n          }\n        }\n      }\n    }\n    .broken-line {\n      margin-top: -0.5rem;\n      height: calc(100vh - 41.6rem);\n      .isSelected {\n        color: #28a8e0;\n      }\n      .line-title {\n        height: 1.8rem;\n        line-height: 1.8rem;\n        vertical-align: middle;\n        margin-bottom: 0.5rem;\n        background: rgba(16, 41, 67, 0.75);\n        border: 1px solid rgba(147, 147, 147, 0.75);\n        border-radius: 8px 8px 0px 0px;\n        cursor: pointer;\n        margin: 0 3rem;\n        .close-icon {\n          cursor: pointer;\n        }\n        .close-icon:hover {\n          color: #3dc5c4;\n        }\n        .title-left {\n          margin-left: 1rem;\n          font-size: 14px;\n          &:hover {\n            color: #28a8e0;\n          }\n        }\n        .title-right {\n          float: right;\n          margin-right: 1rem;\n          font-size: 14px;\n        }\n      }\n      .line-echarts {\n        height: calc(100vh - 38.2rem);\n        margin: 0 3rem;\n        background: rgba(16, 41, 67, 0.6);\n        border: 1px solid rgba(147, 147, 147, 0.75);\n        border-top: none;\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/views"}]}