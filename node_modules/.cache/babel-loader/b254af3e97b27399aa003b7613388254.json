{"remainingRequest":"/Users/heyuanpeng/个人项目/grid/node_modules/babel-loader/lib/index.js!/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/grid/src/components/gridView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/grid/src/components/gridView.vue","mtime":1586942496844},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/babel-loader/lib/index.js","mtime":1586942665794},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/cache-loader/dist/cjs.js","mtime":1573543948041},{"path":"/Users/heyuanpeng/个人项目/grid/node_modules/vue-loader/lib/index.js","mtime":1573543948284}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/grid/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport moment from \"moment\";\nimport parameterText from \"@/components/parameterText.vue\";\nimport indexJudge from \"@/components/indexJudge.vue\";\nimport indexRanking from \"@/components/indexRanking.vue\";\nimport gridJudgeRanking from \"@/components/gridJudgeRanking.vue\";\nimport gridsAlert from \"@/components/gridsAlert.vue\";\nimport gridsJudgeAlert from \"@/components/gridsJudgeAlert.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport EventBus from \"../utils/EventBus.js\";\nimport radarValue from \"@/components/radarValue.vue\";\nimport pieValue from \"@/components/pieValue.vue\";\nexport default {\n  name: \"BasisGrid\",\n  props: {\n    gridType: {\n      type: String,\n      required: true\n    }\n  },\n  components: {\n    IEcharts: IEcharts,\n    parameterText: parameterText,\n    gridsAlert: gridsAlert,\n    bottomMap: bottomMap,\n    indexJudge: indexJudge,\n    indexRanking: indexRanking,\n    gridJudgeRanking: gridJudgeRanking,\n    gridsJudgeAlert: gridsJudgeAlert,\n    headerNavigation: headerNavigation,\n    radarValue: radarValue,\n    pieValue: pieValue\n  },\n  data: function data() {\n    return {\n      baseUrl: process.env.BASE_URL,\n      beginDate: \"\",\n      // 开始时间\n      endDate: \"\",\n      // 结束时间\n      dayCount: 0,\n      // 总天数\n      currentDate: \"\",\n      showOverview: true,\n      isShowChart: true,\n      // 折线图和柱状图的切换\n      showGridview: false,\n      indexValues: [],\n      // 主页的数据  网格id对应数值--\n      allDistrictValue: \"\",\n      // 街道的全区综合值\n      lineDataX: [],\n      // 折线图坐标X\n      lineDataY: [],\n      // 折线图坐标Y\n      firstLevelIndex: [],\n      // 第一层属性 --指数属性--动力等\n      secondLevelIndex: [],\n      // 第二层属性\n      currentIndexName: \"属性指数\",\n      // 当前页面显示指数的名称\n      currentIndexId: \"ZS\",\n      // 当前页面显示指数的id\n      currentGridId: 1101010,\n      // 当前网格的id\n      currentGridName: \"\",\n      // 当前网格的名字\n      currentFirstLevel: \"\",\n      // 第一层属性值的下标\n      currentSecondLevel: \"\",\n      // 第二层属性值的下标\n      currenThridLevel: \"\",\n      indicatorsShow: false,\n      gridsAlert: [],\n      // 网格的数据,名称和值\n      loading: true,\n      lineAlertValue: \"\",\n      // 折线图预警线的值\n      averageValue: \"\",\n      // 每个属性对应的平均值Y轴的值\n      indexValue: \"\",\n      // 每个属性当前的值\n      criticalValue1: \"\",\n      // 每个属性的临界值1\n      criticalValue2: \"\",\n      // 每个属性的临界值2\n      criticalValue3: \"\",\n      // 每个属性的临界值3\n      explainJudge: \"\",\n      // 临界值正向评价和负向评价\n      minValue: \"\",\n      // 每个属性的最小值\n      maxValue: \"\",\n      // 每个属性的最大值\n      indexRankingData: [],\n      // 柱状图需要的街道排名数据\n      gridJudgeRankingData: [],\n      // 初始化(进入街道页面)柱状图需要的排名数据\n      streetData: [],\n      // 文字组件需要的数据,用于进入街道页面的等级判断个数\n      isEchartsShow: false // 是否渲染雷达图\n\n    };\n  },\n  computed: {\n    daySpan: {\n      get: function get() {\n        return [0, this.dayCount];\n      },\n      set: function set() {\n        return [0, this.dayCount];\n      }\n    },\n    // 折线图\n    line: function line() {\n      var _this = this;\n\n      var color = \"\";\n\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n\n      var pieces = [{\n        gt: 0,\n        lt: 1\n      }];\n\n      if (this.alertJudge === \"low\") {\n        pieces = [{\n          gte: 0,\n          lte: Number(this.lineAlertValue),\n          color: \"red\"\n        }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{\n          gte: Number(this.lineAlertValue),\n          lt: 100,\n          color: \"red\"\n        }];\n      } else {\n        pieces = [{\n          gte: 0,\n          lte: 1\n        }];\n      }\n\n      var option = {\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        grid: {\n          left: \"4%\",\n          right: \"9%\",\n          // top: \"150\",\n          bottom: \"10\",\n          x: \"2%\",\n          y: \"5%\",\n          x2: \"2%\",\n          y2: \"15%\",\n          containLabel: true\n        },\n        xAxis: {\n          type: \"category\",\n          data: this.lineDataX,\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          },\n          scale: true\n        },\n        dataZoom: [{\n          type: \"slider\",\n          //图表下方的伸缩条\n          show: false,\n          //是否显示\n          realtime: true,\n          //\n          start: 0,\n          //伸缩条开始位置（1-100），可以随时更改\n          end: 100 //伸缩条结束位置（1-100），可以随时更改\n\n        }, {\n          type: \"inside\",\n          //鼠标滚轮\n          realtime: true\n        }],\n        series: [{\n          type: \"line\",\n          showSymbol: true,\n          data: this.lineDataY,\n          itemStyle: {\n            normal: {\n              /* eslint-disable */\n              color: function color(params) {\n                if (_this.explainJudge === \"forward\") {\n                  return \"#D24A53\";\n                } else {\n                  return \"#FFD6A0\";\n                }\n              },\n              lineStyle: {// color: color\n              }\n            }\n          },\n          markLine: {\n            symbol: \"none\",\n            silent: true,\n            precision: 2,\n            itemStyle: {\n              normal: {\n                textStyle: {\n                  color: \"#F92E2A\"\n                }\n              }\n            },\n            data: [{\n              type: \"average\",\n              name: \"平均值\",\n              lineStyle: {\n                color: \"#3FFCFD\"\n              },\n              label: {\n                show: true,\n                position: \"end\",\n                // formatter: `{b}:{c}`\n                formatter: function formatter(a) {\n                  return \"\".concat(a.name, \":\").concat(a.value);\n                }\n              }\n            }, {\n              name: \"预警线\",\n              yAxis: this.lineAlertValue,\n              lineStyle: {\n                color: \"#F92E2A\"\n              },\n              label: {\n                show: true,\n                position: \"end\",\n                formatter: \"{b}:{c}\"\n              }\n            }]\n          }\n        }]\n      };\n      return option;\n    },\n    // 目前系统的时间\n    currentDayDate: function currentDayDate() {\n      return this.formatTime(this.currentDate);\n    },\n    propsConfig: function propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        indexValue: this.indexValue,\n        streetsData: this.streetsData,\n        alertValue: this.lineAlertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexRankingData: this.indexRankingData\n      };\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.queryAllIndexValue().then(function () {\n      _this2.queryTrendDataOfTimeSpan(\"ZS\");\n\n      _this2.loading = false;\n    });\n    this.getGridsAlert();\n    this.queryDataSpan();\n    EventBus.$on(\"showGridDetail\", this.showIndexDetail);\n  },\n  mounted: function mounted() {\n    // 从柱状图跳转过来的处理\n    if (this.$route.params.nextStreet) {\n      this.$store.state.currentMenuId = 2;\n      this.showIndexDetail(this.$route.params.nextStreet);\n    }\n  },\n  methods: {\n    // 格式化时间\n    formatTime: function formatTime(time) {\n      time = time.toString();\n      time = time.slice(0, 4) + \"年\" + time.slice(4, 6) + \"月\" + time.slice(6, 8) + \"日\";\n      return time;\n    },\n    // 时间滑动 提示tip\n    format: function format(val) {\n      return \"当前时间: \" + moment(this.beginDate).add(val, \"days\").format(\"YYYY-MM-DD\");\n    },\n    // 获取指标数据的时间范围\n    queryDataSpan: function () {\n      var _queryDataSpan = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var dataSpanConfig, result, beginDate, endDate;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dataSpanConfig = \"\".concat(this.baseUrl, \"/static/dataspan.json\");\n                _context.next = 3;\n                return this.$http.get(dataSpanConfig);\n\n              case 3:\n                result = _context.sent;\n\n                if (result && result.data) {\n                  this.beginDate = result.data.beginDate;\n                  this.endDate = result.data.endDate;\n                  beginDate = moment(this.beginDate);\n                  endDate = moment(this.endDate);\n                  this.dayCount = endDate.diff(beginDate, \"days\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function queryDataSpan() {\n        return _queryDataSpan.apply(this, arguments);\n      };\n    }(),\n    // 通过时间滑块查询主页数据\n    queryIndexValueByDate: function queryIndexValueByDate(value) {\n      // 增加时间 天数\n      var date = moment(this.endDate).add(value, \"days\");\n      this.currentDate = date.format(\"YYYY-MM-DD\").replace(/-/g, \"\");\n      this.queryAllIndexValue();\n      return value;\n    },\n    // 点击地图网格显示网格的指数数据\n    showIndexDetail: function showIndexDetail(msg) {\n      var _this3 = this;\n\n      this.currentGridId = msg.gridId;\n      this.currentGridName = msg.gridName;\n\n      if (this.currentFirstLevel === \"\") {\n        this.currentFirstLevel = 0;\n      } else {\n        this.currentFirstLevel = this.currentFirstLevel;\n      }\n\n      this.queryAllIndexValue().then(function () {\n        _this3.indicatorsShow = true;\n        _this3.loading = false;\n        _this3.showGridview = true;\n        _this3.showOverview = false;\n\n        _this3.queryTrendDataOfTimeSpan(_this3.currentIndexId);\n\n        _this3.queryAlerts();\n      });\n    },\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert: function getGridsAlert() {\n      var _this4 = this;\n\n      this.$http(\"\".concat(this.baseUrl, \"/static/gridsAlerts.json\")).then(function (result) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = result.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var grids = _step.value;\n            grids[0] = \"网格\" + _this4.rn(1, 10);\n            grids[1] = _this4.rn(0, 15);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (result.data) _this4.gridsAlert = result.data;\n      });\n    },\n    queryAllIndexValue: function () {\n      var _queryAllIndexValue = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this5 = this;\n\n        var gridId, indexSystemUrl, indexValueUrl, indexAlertValueUrl, indexes, indexValues, indexAlertValue, oneDayIndex, date, allIndexes, allIndexesAlertValue;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                gridId = this.currentGridId; // 指标体系\n\n                indexSystemUrl = \"\".concat(this.baseUrl, \"/static/signsIndex.json\");\n                indexValueUrl = \"\".concat(this.baseUrl, \"/static/indexvalue.json\");\n                indexAlertValueUrl = \"\".concat(this.baseUrl, \"/static/indexAlertValue.json\");\n                _context2.next = 6;\n                return this.$http.get(indexSystemUrl);\n\n              case 6:\n                indexes = _context2.sent;\n                _context2.next = 9;\n                return this.$http.get(indexValueUrl);\n\n              case 9:\n                indexValues = _context2.sent;\n                _context2.next = 12;\n                return this.$http.get(indexAlertValueUrl);\n\n              case 12:\n                indexAlertValue = _context2.sent;\n\n                if (indexValues.status === 200 && indexes.status === 200 && indexAlertValue.status === 200) {\n                  oneDayIndex = [];\n                  this.indexValues = indexValues.data;\n                  this.indexAlertValue = indexAlertValue.data;\n                  date = this.currentDate.replace(/-/g, \"\");\n                  indexValues.data.forEach(function (indexItem) {\n                    // 如果时间日期和当前日期一样\n                    if (indexItem.date.toString() === date) {\n                      oneDayIndex.push(indexItem);\n                    }\n                  }); // 首页指标数据\n\n                  allIndexes = indexes.data;\n                  allIndexes.push({\n                    name: \"全区\",\n                    id: \"ZS\",\n                    children: []\n                  }); // 指标预警以及临界值\n\n                  allIndexesAlertValue = indexAlertValue.data;\n                  oneDayIndex.forEach(function (item) {\n                    // 全区综合值 进入街道页面初始化\n                    if (item.indexId === \"ZS\") {\n                      _this5.allDistrictValue = item;\n                    }\n\n                    for (var index = 0; index < allIndexes.length; index++) {\n                      var firstLevelItem = allIndexes[index];\n\n                      if (firstLevelItem.id === item.indexId) {\n                        // 每天对应的值\n                        firstLevelItem.value = item[gridId]; // 预警值以及临界值以及预警显示条件\n\n                        for (var i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                            // 预警值\n                            firstLevelItem.alertValue = allIndexesAlertValue[i].alertValue;\n                            firstLevelItem.alertJudge = // 预警显示条件\n                            allIndexesAlertValue[i].alertJudge; // 临界值1\n\n                            firstLevelItem.criticalValue1 = allIndexesAlertValue[i].criticalValue1; // 临界值2\n\n                            firstLevelItem.criticalValue2 = allIndexesAlertValue[i].criticalValue2; // 临界值3\n\n                            firstLevelItem.criticalValue3 = allIndexesAlertValue[i].criticalValue3; // 临界值判断条件\n\n                            firstLevelItem.explainJudge = allIndexesAlertValue[i].explainJudge; // 最大值\n\n                            firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue; // 最小值\n\n                            firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                          }\n                        }\n\n                        break;\n                      } else {\n                        if (item.indexId.indexOf(firstLevelItem.id) != -1) {\n                          for (var secondIndex = 0; secondIndex < firstLevelItem.children.length; secondIndex++) {\n                            var secondLevelIndex = firstLevelItem.children[secondIndex];\n\n                            if (secondLevelIndex.id === item.indexId) {\n                              secondLevelIndex.value = item[gridId]; // 预警值以及临界值以及预警显示条件\n\n                              for (var _i = 0; _i < allIndexesAlertValue.length; _i++) {\n                                if (secondLevelIndex.id === allIndexesAlertValue[_i].id) {\n                                  // 预警值\n                                  secondLevelIndex.alertValue = allIndexesAlertValue[_i].alertValue;\n                                  secondLevelIndex.alertJudge = // 预警显示条件\n                                  allIndexesAlertValue[_i].alertJudge; // 临界值1\n\n                                  secondLevelIndex.criticalValue1 = allIndexesAlertValue[_i].criticalValue1; // 临界值2\n\n                                  secondLevelIndex.criticalValue2 = allIndexesAlertValue[_i].criticalValue2; // 临界值3\n\n                                  secondLevelIndex.criticalValue3 = allIndexesAlertValue[_i].criticalValue3; // 临界值判断条件\n\n                                  secondLevelIndex.explainJudge = allIndexesAlertValue[_i].explainJudge; // 最大值\n\n                                  secondLevelIndex.maxValue = allIndexesAlertValue[_i].maxValue; // 最小值\n\n                                  secondLevelIndex.minValue = allIndexesAlertValue[_i].minValue;\n                                }\n                              }\n\n                              break;\n                            } else {\n                              for (var thirdIndex = 0; thirdIndex < secondLevelIndex.children.length; thirdIndex++) {\n                                var thirdLevelIndex = secondLevelIndex.children[thirdIndex];\n\n                                if (thirdLevelIndex.id === item.indexId) {\n                                  thirdLevelIndex.value = item[gridId];\n\n                                  for (var _i2 = 0; _i2 < allIndexesAlertValue.length; _i2++) {\n                                    if (thirdLevelIndex.id === allIndexesAlertValue[_i2].id) {\n                                      // 预警值\n                                      thirdLevelIndex.alertValue = allIndexesAlertValue[_i2].alertValue;\n                                      thirdLevelIndex.alertJudge = // 预警显示条件\n                                      allIndexesAlertValue[_i2].alertJudge; // 临界值1\n\n                                      thirdLevelIndex.criticalValue1 = allIndexesAlertValue[_i2].criticalValue1; // 临界值2\n\n                                      thirdLevelIndex.criticalValue2 = allIndexesAlertValue[_i2].criticalValue2; // 临界值3\n\n                                      thirdLevelIndex.criticalValue3 = allIndexesAlertValue[_i2].criticalValue3; // 临界值判断条件\n\n                                      thirdLevelIndex.explainJudge = allIndexesAlertValue[_i2].explainJudge; // 最大值\n\n                                      thirdLevelIndex.maxValue = allIndexesAlertValue[_i2].maxValue; // 最小值\n\n                                      thirdLevelIndex.minValue = allIndexesAlertValue[_i2].minValue;\n                                    }\n                                  }\n\n                                  break;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }); // 第一层指数属性\n\n                  this.firstLevelIndex = allIndexes;\n                  this.isEchartsShow = true; // 第二层指数\n                  // eslint-disable-next-line\n\n                  this.secondLevelIndex = this.firstLevelIndex[this.currentFirstLevel === \"\" ? 0 : this.currentFirstLevel].children;\n                }\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function queryAllIndexValue() {\n        return _queryAllIndexValue.apply(this, arguments);\n      };\n    }(),\n    // echarts事件 根据时间的变化而数据变化\n    showDayData: function showDayData(instance) {\n      // 当前点击的时间\n      var dayDate = instance.name;\n      this.currentDate = dayDate;\n      this.$store.state.barInfo = {};\n      this.queryAllIndexValue();\n      this.queryTrendDataOfTimeSpan(this.indexId);\n      EventBus.$emit(\"clearLayerStyle\");\n    },\n    // 获取指标综合评价\n    queryJudge: function queryJudge() {},\n    // 获取指标综合排名\n    queryOrder: function queryOrder() {},\n    // 获取指标综合预警\n    queryAlerts: function queryAlerts() {},\n    // 获取一年时间内的数据变化情况 获取折线图的x,y\n    queryTrendDataOfTimeSpan: function queryTrendDataOfTimeSpan(indexId) {\n      var _this6 = this;\n\n      var xData = [];\n      var yData = [];\n      this.indexId = indexId;\n      this.indexValues.forEach(function (indexValueItem) {\n        if (indexValueItem.indexId === indexId) {\n          xData.push(indexValueItem.date);\n          yData.push(indexValueItem[_this6.currentGridId]);\n        }\n\n        if (indexValueItem.indexId === indexId && _this6.currentDate == indexValueItem.date) {\n          // 当天街道的数据\n          _this6.streetsData = indexValueItem; // 字段显示的值\n\n          _this6.indexValue = indexValueItem[_this6.currentGridId];\n\n          var _indexRanking = _this6.computeValue(indexValueItem); // this.indexRankingData = indexRanking.slice(0, 5);\n\n\n          _this6.indexRankingData = _indexRanking;\n        }\n      });\n      var allIndexesAlertValue = this.indexAlertValue;\n\n      for (var i = 0; i < allIndexesAlertValue.length; i++) {\n        if (indexId === allIndexesAlertValue[i].id) {\n          // 值\n          // 临界值1\n          this.criticalValue1 = allIndexesAlertValue[i].criticalValue1; // 临界值2\n\n          this.criticalValue2 = allIndexesAlertValue[i].criticalValue2; // 临界值3\n\n          this.criticalValue3 = allIndexesAlertValue[i].criticalValue3;\n          this.explainJudge = allIndexesAlertValue[i].explainJudge; // 最大值\n\n          this.maxValue = allIndexesAlertValue[i].maxValue; // 最小值\n\n          this.minValue = allIndexesAlertValue[i].minValue;\n        }\n      }\n\n      this.lineDataX = xData;\n      this.lineDataY = yData; // 计算平均值\n\n      var averageValue = Number(eval(this.lineDataY.join(\"+\")) / this.lineDataY.length * 100 / 100).toFixed(2);\n      this.averageValue = averageValue;\n    },\n    //返回指定范围随机数\n    rn: function rn(min, max) {\n      var n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    // 计算进入街道页面的街道排名\n    computeValue: function computeValue(indexValueItem) {\n      var streetName = [];\n      var streetValue = [];\n      var checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n\n      for (var key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n\n      var rankingData = streetName.map(function (key, index) {\n        return [key, streetValue[index]];\n      }); // 计算排名\n\n      var mapped = rankingData.map(function (ar, i) {\n        return {\n          value: ar[1],\n          index: i\n        }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function (a, b) {\n        return b.value - a.value;\n      }); // 将三个undefined转换为对应的字段\n\n      var result = mapped.map(function (key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (rankingData[key.index][1].toString().indexOf(\".\") == -1 && rankingData[key.index][1].length == 8) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n\n        return rankingData[key.index];\n      }); // 计算排名保留\n\n      var indexRanking = [];\n      result.map(function (key) {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    }\n  },\n  watch: {\n    // eslint-disable-next-line\n    $route: function $route(to, from) {\n      this.indicatorsShow = false;\n      this.showOverview = true;\n      this.showGridview = false;\n      this.fristLevelIndex = \"\";\n      this.currentFirstLevel = \"\";\n      this.$store.state.barInfo = {};\n      EventBus.$emit(\"clearLayerStyle\"); // 如果是街道页面\n      // if (this.gridType === \"street\") {\n      //   this.currentFirstLevel = 0;\n      //   const defaultStreet = { gridId: 110101010, gridName: \"和平里街道\" };\n      //   this.showIndexDetail(defaultStreet);\n      // }\n    },\n    // 进入街道全区的所以数据显示\n    allDistrictValue: function allDistrictValue(val, oldVal) {\n      if (this.gridType === \"street\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          this.streetsData = this.allDistrictValue;\n          this.indexValue = this.streetsData[1101010];\n\n          var _gridJudgeRanking = this.computeValue(this.allDistrictValue); // 计算平均值\n\n\n          var streetData = [];\n          streetData = _gridJudgeRanking.map(function (item) {\n            return item[1];\n          });\n          var averageValue = Number(eval(streetData.join(\"+\")) / streetData.length * 100 / 100).toFixed(2);\n          this.averageValue = averageValue;\n          this.streetData = _gridJudgeRanking;\n          this.gridJudgeRankingData = _gridJudgeRanking;\n          this.maxValue = this.firstLevelIndex[4].maxValue;\n          this.minValue = this.firstLevelIndex[4].minValue;\n          this.lineAlertValue = this.firstLevelIndex[4].alertValue;\n          this.alertJudge = this.firstLevelIndex[4].alertJudge;\n          this.criticalValue1 = this.firstLevelIndex[4].criticalValue1;\n          this.criticalValue2 = this.firstLevelIndex[4].criticalValue2;\n          this.criticalValue3 = this.firstLevelIndex[4].criticalValue3;\n          this.explainJudge = this.firstLevelIndex[4].explainJudge;\n          this.indicatorsShow = true;\n        }\n      } else if (this.gridType === \"community\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          console.log(\"社区\");\n        }\n      } else if (this.gridType === \"grid\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          console.log(\"基础网格\");\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["gridView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"basisGrid\">\n    <!-- 浮动层 -->\n    <div class=\"floating-layer\">\n      <!-- 时间 -->\n      <div class=\"currentDate\">\n        <span class=\"timer-icon\"></span>\n        <span>{{currentDayDate}}</span>\n      </div>\n      <div class=\"basis-content\">\n        <!-- 地图 -->\n        <div id=\"mapArcgis\" class=\"mapArcgis\">\n          <bottomMap\n            :gridType=\"gridType\"\n            :gridsAlert=\"gridsAlert\"\n            :propsConfig=\"propsConfig\"\n            :indicatorsShow=\"indicatorsShow\"\n          ></bottomMap>\n        </div>\n        <!-- 左侧 -->\n        <div class=\"bc-left-left\">\n          <div class=\"indicators-list\">\n            <div class=\"index-title\">空间单元画像综合排名</div>\n            <div class=\"index-content\" v-for=\"(item,index) in indexRankingData\" :key=\"index\">\n              <div class=\"content\" :class=\"{'isEqBackground':index%2==0}\">\n                <div class=\"content-left\">\n                  <!-- 排名 -->\n                  <span class=\"ranking-number\">{{index+1}}</span>\n                  <!-- 具体指数 -->\n                  <span class=\"name\">{{item[0]}}</span>\n                </div>\n                <div class=\"content-right\">\n                  <!-- 指数值 -->\n                  <span class=\"trends\">{{Number(item[1]).toFixed(2)}}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- 右侧内容 -->\n        <div class=\"bc-left-right\">\n          <!-- 网格显示 初始化 -->\n          <div class=\"parameter\">\n            <!-- 基础网格总数量 -->\n            <parameterText\n              :streetData=\"streetData\"\n              :streetNumer=\"Number(this.$store.state.streetNumber)\"\n              :explainJudge=\"explainJudge\"\n              :averageValue=\"Number(averageValue)\"\n              :indexValue=\"Number(indexValue)\"\n              :minValue=\"Number(minValue)\"\n              :maxValue=\"Number(maxValue)\"\n              :criticalValue1=\"Number(criticalValue1)\"\n              :criticalValue2=\"Number(criticalValue2)\"\n              :criticalValue3=\"Number(criticalValue3)\"\n            />\n\n            <radarValue :data=\"firstLevelIndex\" :loading=\"loading\" :date=\"currentDayDate\"/>\n            <pieValue :propsConfig=\"propsConfig\" :loading=\"loading\" :date=\"currentDayDate\"/>\n          </div>\n          <!-- 网格显示 -->\n        </div>\n        <!-- 折线图和柱状图 -->\n        <div class=\"broken-line\" v-show=\"indicatorsShow\">\n          <div class=\"line-title\">\n            <!-- <span\n              class=\"title-left\"\n              :class=\"{isSelected:isShowChart}\"\n              @click=\"isShowChart = true\"\n            >社区综合排名</span>&nbsp;-->\n            <span class=\"title-left\">{{ currentIndexName + '变化趋势'}}</span>\n\n            <div class=\"dateSelector\">\n              <div class=\"selector\">\n                <div class=\"slider\">\n                  <Slider\n                    v-show=\"false\"\n                    v-model=\"daySpan\"\n                    :max=\"dayCount\"\n                    @on-input=\"queryIndexValueByDate\"\n                    :tip-format=\"format\"\n                  ></Slider>\n                </div>\n              </div>\n            </div>\n            <span class=\"title-right\">\n              <Icon type=\"md-alert\"/>\n            </span>\n          </div>\n          <!-- 政柱状图 -->\n          <div class=\"line-echarts\">\n            <!-- <IEcharts\n              :option=\"bar\"\n              :resizable=\"true\"\n              @click=\"showCommunityPage\"\n              v-show=\"isShowChart\"\n            ></IEcharts>-->\n            <IEcharts :option=\"line\" :resizable=\"true\" @click=\"showDayData\"></IEcharts>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport headerNavigation from \"@/components/headerNavigation.vue\";\nimport IEcharts from \"vue-echarts-v3\";\nimport moment from \"moment\";\nimport parameterText from \"@/components/parameterText.vue\";\nimport indexJudge from \"@/components/indexJudge.vue\";\nimport indexRanking from \"@/components/indexRanking.vue\";\nimport gridJudgeRanking from \"@/components/gridJudgeRanking.vue\";\nimport gridsAlert from \"@/components/gridsAlert.vue\";\nimport gridsJudgeAlert from \"@/components/gridsJudgeAlert.vue\";\nimport bottomMap from \"@/components/bottomMap.vue\";\nimport EventBus from \"../utils/EventBus.js\";\nimport radarValue from \"@/components/radarValue.vue\";\nimport pieValue from \"@/components/pieValue.vue\";\n\nexport default {\n  name: \"BasisGrid\",\n  props: {\n    gridType: {\n      type: String,\n      required: true\n    }\n  },\n  components: {\n    IEcharts,\n    parameterText,\n    gridsAlert,\n    bottomMap,\n    indexJudge,\n    indexRanking,\n    gridJudgeRanking,\n    gridsJudgeAlert,\n    headerNavigation,\n    radarValue,\n    pieValue\n  },\n  data() {\n    return {\n      baseUrl: process.env.BASE_URL,\n      beginDate: \"\", // 开始时间\n      endDate: \"\", // 结束时间\n      dayCount: 0, // 总天数\n      currentDate: \"\",\n      showOverview: true,\n      isShowChart: true, // 折线图和柱状图的切换\n      showGridview: false,\n      indexValues: [], // 主页的数据  网格id对应数值--\n      allDistrictValue: \"\", // 街道的全区综合值\n      lineDataX: [], // 折线图坐标X\n      lineDataY: [], // 折线图坐标Y\n      firstLevelIndex: [], // 第一层属性 --指数属性--动力等\n      secondLevelIndex: [], // 第二层属性\n      currentIndexName: \"属性指数\", // 当前页面显示指数的名称\n      currentIndexId: \"ZS\", // 当前页面显示指数的id\n      currentGridId: 1101010, // 当前网格的id\n      currentGridName: \"\", // 当前网格的名字\n      currentFirstLevel: \"\", // 第一层属性值的下标\n      currentSecondLevel: \"\", // 第二层属性值的下标\n      currenThridLevel: \"\",\n      indicatorsShow: false,\n      gridsAlert: [], // 网格的数据,名称和值\n      loading: true,\n      lineAlertValue: \"\", // 折线图预警线的值\n      averageValue: \"\", // 每个属性对应的平均值Y轴的值\n      indexValue: \"\", // 每个属性当前的值\n      criticalValue1: \"\", // 每个属性的临界值1\n      criticalValue2: \"\", // 每个属性的临界值2\n      criticalValue3: \"\", // 每个属性的临界值3\n      explainJudge: \"\", // 临界值正向评价和负向评价\n      minValue: \"\", // 每个属性的最小值\n      maxValue: \"\", // 每个属性的最大值\n      indexRankingData: [], // 柱状图需要的街道排名数据\n      gridJudgeRankingData: [], // 初始化(进入街道页面)柱状图需要的排名数据\n      streetData: [], // 文字组件需要的数据,用于进入街道页面的等级判断个数\n      isEchartsShow: false // 是否渲染雷达图\n    };\n  },\n  computed: {\n    daySpan: {\n      get: function() {\n        return [0, this.dayCount];\n      },\n      set: function() {\n        return [0, this.dayCount];\n      }\n    },\n    // 折线图\n    line() {\n      let color = \"\";\n      if (this.explainJudge === \"forward\") {\n        color = \"#04ff92 \";\n      } else {\n        color = \"#efdb02\";\n      }\n      var pieces = [{ gt: 0, lt: 1 }];\n      if (this.alertJudge === \"low\") {\n        pieces = [{ gte: 0, lte: Number(this.lineAlertValue), color: \"red\" }];\n      } else if (this.alertJudge === \"high\") {\n        pieces = [{ gte: Number(this.lineAlertValue), lt: 100, color: \"red\" }];\n      } else {\n        pieces = [{ gte: 0, lte: 1 }];\n      }\n      let option = {\n        visualMap: {\n          show: false,\n          pieces: pieces,\n          outOfRange: {\n            color: color\n          }\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n\n        grid: {\n          left: \"4%\",\n          right: \"9%\",\n          // top: \"150\",\n          bottom: \"10\",\n          x: \"2%\",\n          y: \"5%\",\n          x2: \"2%\",\n          y2: \"15%\",\n          containLabel: true\n        },\n\n        xAxis: {\n          type: \"category\",\n          data: this.lineDataX,\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          splitLine: {\n            show: false\n          },\n          axisLabel: {\n            show: true,\n            textStyle: {\n              color: \"#fff\"\n            }\n          },\n          scale: true\n        },\n        dataZoom: [\n          {\n            type: \"slider\", //图表下方的伸缩条\n            show: false, //是否显示\n            realtime: true, //\n            start: 0, //伸缩条开始位置（1-100），可以随时更改\n            end: 100 //伸缩条结束位置（1-100），可以随时更改\n          },\n          {\n            type: \"inside\", //鼠标滚轮\n            realtime: true\n          }\n        ],\n        series: [\n          {\n            type: \"line\",\n            showSymbol: true,\n            data: this.lineDataY,\n            itemStyle: {\n              normal: {\n                /* eslint-disable */\n                color: params => {\n                  if (this.explainJudge === \"forward\") {\n                    return \"#D24A53\";\n                  } else {\n                    return \"#FFD6A0\";\n                  }\n                },\n                lineStyle: {\n                  // color: color\n                }\n              }\n            },\n            markLine: {\n              symbol: \"none\",\n              silent: true,\n              precision: 2,\n              itemStyle: {\n                normal: {\n                  textStyle: {\n                    color: \"#F92E2A\"\n                  }\n                }\n              },\n              data: [\n                {\n                  type: \"average\",\n                  name: \"平均值\",\n                  lineStyle: {\n                    color: \"#3FFCFD\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    // formatter: `{b}:{c}`\n                    formatter: function(a) {\n                      return `${a.name}:${a.value}`;\n                    }\n                  }\n                },\n                {\n                  name: \"预警线\",\n                  yAxis: this.lineAlertValue,\n                  lineStyle: {\n                    color: \"#F92E2A\"\n                  },\n                  label: {\n                    show: true,\n                    position: \"end\",\n                    formatter: `{b}:{c}`\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      };\n      return option;\n    },\n    // 目前系统的时间\n    currentDayDate() {\n      return this.formatTime(this.currentDate);\n    },\n    propsConfig() {\n      return {\n        criticalValue1: this.criticalValue1,\n        criticalValue2: this.criticalValue2,\n        criticalValue3: this.criticalValue3,\n        indexValue: this.indexValue,\n        streetsData: this.streetsData,\n        alertValue: this.lineAlertValue,\n        alertJudge: this.alertJudge,\n        explainJudge: this.explainJudge,\n        indexRankingData: this.indexRankingData\n      };\n    }\n  },\n  created() {\n    this.queryAllIndexValue().then(() => {\n      this.queryTrendDataOfTimeSpan(\"ZS\");\n      this.loading = false;\n    });\n    this.getGridsAlert();\n    this.queryDataSpan();\n    EventBus.$on(\"showGridDetail\", this.showIndexDetail);\n  },\n  mounted() {\n    // 从柱状图跳转过来的处理\n    if (this.$route.params.nextStreet) {\n      this.$store.state.currentMenuId = 2;\n      this.showIndexDetail(this.$route.params.nextStreet);\n    }\n  },\n  methods: {\n    // 格式化时间\n    formatTime(time) {\n      time = time.toString();\n      time =\n        time.slice(0, 4) +\n        \"年\" +\n        time.slice(4, 6) +\n        \"月\" +\n        time.slice(6, 8) +\n        \"日\";\n      return time;\n    },\n    // 时间滑动 提示tip\n    format(val) {\n      return (\n        \"当前时间: \" +\n        moment(this.beginDate)\n          .add(val, \"days\")\n          .format(\"YYYY-MM-DD\")\n      );\n    },\n    // 获取指标数据的时间范围\n    async queryDataSpan() {\n      const dataSpanConfig = `${this.baseUrl}/static/dataspan.json`;\n      const result = await this.$http.get(dataSpanConfig);\n      if (result && result.data) {\n        this.beginDate = result.data.beginDate;\n        this.endDate = result.data.endDate;\n        const beginDate = moment(this.beginDate);\n        const endDate = moment(this.endDate);\n        this.dayCount = endDate.diff(beginDate, \"days\");\n      }\n    },\n    // 通过时间滑块查询主页数据\n    queryIndexValueByDate(value) {\n      // 增加时间 天数\n      const date = moment(this.endDate).add(value, \"days\");\n      this.currentDate = date.format(\"YYYY-MM-DD\").replace(/-/g, \"\");\n      this.queryAllIndexValue();\n      return value;\n    },\n\n    // 点击地图网格显示网格的指数数据\n    showIndexDetail(msg) {\n      this.currentGridId = msg.gridId;\n      this.currentGridName = msg.gridName;\n      if (this.currentFirstLevel === \"\") {\n        this.currentFirstLevel = 0;\n      } else {\n        this.currentFirstLevel = this.currentFirstLevel;\n      }\n      this.queryAllIndexValue().then(() => {\n        this.indicatorsShow = true;\n        this.loading = false;\n        this.showGridview = true;\n        this.showOverview = false;\n        this.queryTrendDataOfTimeSpan(this.currentIndexId);\n        this.queryAlerts();\n      });\n    },\n    // 获取指数  网格一 网格二  网格三\n    getGridsAlert() {\n      this.$http(`${this.baseUrl}/static/gridsAlerts.json`).then(result => {\n        for (let grids of result.data) {\n          grids[0] = \"网格\" + this.rn(1, 10);\n          grids[1] = this.rn(0, 15);\n        }\n        if (result.data) this.gridsAlert = result.data;\n      });\n    },\n    async queryAllIndexValue() {\n      const gridId = this.currentGridId;\n      // 指标体系\n      const indexSystemUrl = `${this.baseUrl}/static/signsIndex.json`;\n      const indexValueUrl = `${this.baseUrl}/static/indexvalue.json`;\n      const indexAlertValueUrl = `${this.baseUrl}/static/indexAlertValue.json`;\n      let indexes = await this.$http.get(indexSystemUrl);\n      const indexValues = await this.$http.get(indexValueUrl);\n      const indexAlertValue = await this.$http.get(indexAlertValueUrl);\n\n      if (\n        indexValues.status === 200 &&\n        indexes.status === 200 &&\n        indexAlertValue.status === 200\n      ) {\n        let oneDayIndex = [];\n        this.indexValues = indexValues.data;\n        this.indexAlertValue = indexAlertValue.data;\n        const date = this.currentDate.replace(/-/g, \"\");\n        indexValues.data.forEach(indexItem => {\n          // 如果时间日期和当前日期一样\n          if (indexItem.date.toString() === date) {\n            oneDayIndex.push(indexItem);\n          }\n        });\n        // 首页指标数据\n        const allIndexes = indexes.data;\n        allIndexes.push({ name: \"全区\", id: \"ZS\", children: [] });\n        // 指标预警以及临界值\n        const allIndexesAlertValue = indexAlertValue.data;\n        oneDayIndex.forEach(item => {\n          // 全区综合值 进入街道页面初始化\n          if (item.indexId === \"ZS\") {\n            this.allDistrictValue = item;\n          }\n          for (let index = 0; index < allIndexes.length; index++) {\n            const firstLevelItem = allIndexes[index];\n            if (firstLevelItem.id === item.indexId) {\n              // 每天对应的值\n              firstLevelItem.value = item[gridId];\n              // 预警值以及临界值以及预警显示条件\n              for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                if (firstLevelItem.id === allIndexesAlertValue[i].id) {\n                  // 预警值\n                  firstLevelItem.alertValue =\n                    allIndexesAlertValue[i].alertValue;\n                  firstLevelItem.alertJudge =\n                    // 预警显示条件\n                    allIndexesAlertValue[i].alertJudge;\n                  // 临界值1\n                  firstLevelItem.criticalValue1 =\n                    allIndexesAlertValue[i].criticalValue1;\n                  // 临界值2\n                  firstLevelItem.criticalValue2 =\n                    allIndexesAlertValue[i].criticalValue2;\n                  // 临界值3\n                  firstLevelItem.criticalValue3 =\n                    allIndexesAlertValue[i].criticalValue3;\n                  // 临界值判断条件\n                  firstLevelItem.explainJudge =\n                    allIndexesAlertValue[i].explainJudge;\n                  // 最大值\n                  firstLevelItem.maxValue = allIndexesAlertValue[i].maxValue;\n                  // 最小值\n                  firstLevelItem.minValue = allIndexesAlertValue[i].minValue;\n                }\n              }\n              break;\n            } else {\n              if (item.indexId.indexOf(firstLevelItem.id) != -1) {\n                for (\n                  let secondIndex = 0;\n                  secondIndex < firstLevelItem.children.length;\n                  secondIndex++\n                ) {\n                  const secondLevelIndex = firstLevelItem.children[secondIndex];\n                  if (secondLevelIndex.id === item.indexId) {\n                    secondLevelIndex.value = item[gridId];\n\n                    // 预警值以及临界值以及预警显示条件\n                    for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                      if (secondLevelIndex.id === allIndexesAlertValue[i].id) {\n                        // 预警值\n                        secondLevelIndex.alertValue =\n                          allIndexesAlertValue[i].alertValue;\n                        secondLevelIndex.alertJudge =\n                          // 预警显示条件\n                          allIndexesAlertValue[i].alertJudge;\n                        // 临界值1\n                        secondLevelIndex.criticalValue1 =\n                          allIndexesAlertValue[i].criticalValue1;\n                        // 临界值2\n                        secondLevelIndex.criticalValue2 =\n                          allIndexesAlertValue[i].criticalValue2;\n                        // 临界值3\n                        secondLevelIndex.criticalValue3 =\n                          allIndexesAlertValue[i].criticalValue3;\n                        // 临界值判断条件\n                        secondLevelIndex.explainJudge =\n                          allIndexesAlertValue[i].explainJudge;\n                        // 最大值\n                        secondLevelIndex.maxValue =\n                          allIndexesAlertValue[i].maxValue;\n                        // 最小值\n                        secondLevelIndex.minValue =\n                          allIndexesAlertValue[i].minValue;\n                      }\n                    }\n                    break;\n                  } else {\n                    for (\n                      let thirdIndex = 0;\n                      thirdIndex < secondLevelIndex.children.length;\n                      thirdIndex++\n                    ) {\n                      const thirdLevelIndex =\n                        secondLevelIndex.children[thirdIndex];\n                      if (thirdLevelIndex.id === item.indexId) {\n                        thirdLevelIndex.value = item[gridId];\n                        for (let i = 0; i < allIndexesAlertValue.length; i++) {\n                          if (\n                            thirdLevelIndex.id === allIndexesAlertValue[i].id\n                          ) {\n                            // 预警值\n                            thirdLevelIndex.alertValue =\n                              allIndexesAlertValue[i].alertValue;\n                            thirdLevelIndex.alertJudge =\n                              // 预警显示条件\n                              allIndexesAlertValue[i].alertJudge;\n                            // 临界值1\n                            thirdLevelIndex.criticalValue1 =\n                              allIndexesAlertValue[i].criticalValue1;\n                            // 临界值2\n                            thirdLevelIndex.criticalValue2 =\n                              allIndexesAlertValue[i].criticalValue2;\n                            // 临界值3\n                            thirdLevelIndex.criticalValue3 =\n                              allIndexesAlertValue[i].criticalValue3;\n                            // 临界值判断条件\n                            thirdLevelIndex.explainJudge =\n                              allIndexesAlertValue[i].explainJudge;\n                            // 最大值\n                            thirdLevelIndex.maxValue =\n                              allIndexesAlertValue[i].maxValue;\n                            // 最小值\n                            thirdLevelIndex.minValue =\n                              allIndexesAlertValue[i].minValue;\n                          }\n                        }\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n        // 第一层指数属性\n        this.firstLevelIndex = allIndexes;\n        this.isEchartsShow = true;\n        // 第二层指数\n        // eslint-disable-next-line\n        this.secondLevelIndex = this.firstLevelIndex[\n          this.currentFirstLevel === \"\" ? 0 : this.currentFirstLevel\n        ].children;\n      }\n    },\n    // echarts事件 根据时间的变化而数据变化\n    showDayData(instance) {\n      // 当前点击的时间\n      let dayDate = instance.name;\n      this.currentDate = dayDate;\n      this.$store.state.barInfo = {};\n      this.queryAllIndexValue();\n      this.queryTrendDataOfTimeSpan(this.indexId);\n\n      EventBus.$emit(\"clearLayerStyle\");\n    },\n    // 获取指标综合评价\n    queryJudge() {},\n    // 获取指标综合排名\n    queryOrder() {},\n    // 获取指标综合预警\n    queryAlerts() {},\n    // 获取一年时间内的数据变化情况 获取折线图的x,y\n    queryTrendDataOfTimeSpan(indexId) {\n      const xData = [];\n      const yData = [];\n      this.indexId = indexId;\n      this.indexValues.forEach(indexValueItem => {\n        if (indexValueItem.indexId === indexId) {\n          xData.push(indexValueItem.date);\n          yData.push(indexValueItem[this.currentGridId]);\n        }\n        if (\n          indexValueItem.indexId === indexId &&\n          this.currentDate == indexValueItem.date\n        ) {\n          // 当天街道的数据\n          this.streetsData = indexValueItem;\n          // 字段显示的值\n          this.indexValue = indexValueItem[this.currentGridId];\n          let indexRanking = this.computeValue(indexValueItem);\n          // this.indexRankingData = indexRanking.slice(0, 5);\n          this.indexRankingData = indexRanking;\n        }\n      });\n      const allIndexesAlertValue = this.indexAlertValue;\n      for (let i = 0; i < allIndexesAlertValue.length; i++) {\n        if (indexId === allIndexesAlertValue[i].id) {\n          // 值\n          // 临界值1\n          this.criticalValue1 = allIndexesAlertValue[i].criticalValue1;\n          // 临界值2\n          this.criticalValue2 = allIndexesAlertValue[i].criticalValue2;\n          // 临界值3\n          this.criticalValue3 = allIndexesAlertValue[i].criticalValue3;\n          this.explainJudge = allIndexesAlertValue[i].explainJudge;\n          // 最大值\n          this.maxValue = allIndexesAlertValue[i].maxValue;\n          // 最小值\n          this.minValue = allIndexesAlertValue[i].minValue;\n        }\n      }\n      this.lineDataX = xData;\n      this.lineDataY = yData;\n      // 计算平均值\n      let averageValue = Number(\n        ((eval(this.lineDataY.join(\"+\")) / this.lineDataY.length) * 100) / 100\n      ).toFixed(2);\n      this.averageValue = averageValue;\n    },\n    //返回指定范围随机数\n    rn(min, max) {\n      let n = parseInt(Math.random() * (max - min) + min);\n      return n;\n    },\n    // 计算进入街道页面的街道排名\n    computeValue(indexValueItem) {\n      const streetName = [];\n      const streetValue = [];\n      const checkChinese = /[\\u4E00-\\u9FA5\\uF900-\\uFA2D]/;\n      for (let key in indexValueItem) {\n        streetName.push(this.$store.state.streetNameCode[key]);\n        streetValue.push(indexValueItem[key]);\n      }\n      let rankingData = streetName.map((key, index) => {\n        return [key, streetValue[index]];\n      });\n      // 计算排名\n      let mapped = rankingData.map(function(ar, i) {\n        return { value: ar[1], index: i }; //输出一个object对象，value为排序的数字的值，index为数字所在的数组在一维数组中的索引值\n      });\n      mapped.sort(function(a, b) {\n        return b.value - a.value;\n      });\n      // 将三个undefined转换为对应的字段\n      let result = mapped.map(function(key) {\n        if (typeof rankingData[key.index][0] == \"undefined\") {\n          if (rankingData[key.index][1].toString().indexOf(\"ZS\") != -1) {\n            rankingData[key.index][0] = \"indexId\";\n          } else if (\n            rankingData[key.index][1].toString().indexOf(\".\") == -1 &&\n            rankingData[key.index][1].length == 8\n          ) {\n            rankingData[key.index][0] = \"date\";\n          } else {\n            rankingData[key.index][0] = \"1101010\";\n          }\n        }\n        return rankingData[key.index];\n      });\n      // 计算排名保留\n      let indexRanking = [];\n      result.map(key => {\n        if (checkChinese.test(key[0])) {\n          indexRanking.push(key);\n        }\n      });\n      return indexRanking;\n    }\n  },\n  watch: {\n    // eslint-disable-next-line\n    $route(to, from) {\n      this.indicatorsShow = false;\n      this.showOverview = true;\n      this.showGridview = false;\n      this.fristLevelIndex = \"\";\n      this.currentFirstLevel = \"\";\n      this.$store.state.barInfo = {};\n      EventBus.$emit(\"clearLayerStyle\");\n      // 如果是街道页面\n      // if (this.gridType === \"street\") {\n      //   this.currentFirstLevel = 0;\n      //   const defaultStreet = { gridId: 110101010, gridName: \"和平里街道\" };\n      //   this.showIndexDetail(defaultStreet);\n      // }\n    },\n    // 进入街道全区的所以数据显示\n    allDistrictValue(val, oldVal) {\n      if (this.gridType === \"street\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          this.streetsData = this.allDistrictValue;\n          this.indexValue = this.streetsData[1101010];\n          let gridJudgeRanking = this.computeValue(this.allDistrictValue);\n          // 计算平均值\n          let streetData = [];\n          streetData = gridJudgeRanking.map(item => {\n            return item[1];\n          });\n          let averageValue = Number(\n            ((eval(streetData.join(\"+\")) / streetData.length) * 100) / 100\n          ).toFixed(2);\n          this.averageValue = averageValue;\n          this.streetData = gridJudgeRanking;\n          this.gridJudgeRankingData = gridJudgeRanking;\n          this.maxValue = this.firstLevelIndex[4].maxValue;\n          this.minValue = this.firstLevelIndex[4].minValue;\n          this.lineAlertValue = this.firstLevelIndex[4].alertValue;\n          this.alertJudge = this.firstLevelIndex[4].alertJudge;\n          this.criticalValue1 = this.firstLevelIndex[4].criticalValue1;\n          this.criticalValue2 = this.firstLevelIndex[4].criticalValue2;\n          this.criticalValue3 = this.firstLevelIndex[4].criticalValue3;\n          this.explainJudge = this.firstLevelIndex[4].explainJudge;\n          this.indicatorsShow = true;\n        }\n      } else if (this.gridType === \"community\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          console.log(\"社区\");\n        }\n      } else if (this.gridType === \"grid\") {\n        if (val[\"indexId\"] !== oldVal[\"indexId\"]) {\n          console.log(\"基础网格\");\n        }\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.basisGrid {\n  width: 100%;\n  height: calc(100vh - 3.6rem);\n  padding-top: 0.1rem;\n  .mapArcgis {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    z-index: 11;\n  }\n  .floating-layer {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    .currentDate {\n      position: absolute;\n      z-index: 1002;\n      display: flex;\n      align-content: center;\n      font-size: 12px;\n      font-weight: bolder;\n      color: #000;\n      font-weight: bold;\n      justify-content: center;\n      left: 15%;\n      top: 2%;\n      span {\n        margin-left: 0.4rem;\n      }\n      .timer-icon {\n        display: inline-block;\n        width: 20px;\n        height: 20px;\n        // background: url(\"../assets/img/status/timer.png\") no-repeat center;\n        background-size: contain;\n      }\n    }\n    .basis-content {\n      width: 100%;\n      height: 100%;\n\n      .dateSelector {\n        position: absolute;\n        z-index: 22;\n        width: 100%;\n        // left: 0%;\n        // bottom: 0rem;\n        top: 1rem;\n        z-index: 99;\n        .selector {\n          display: flex;\n          width: 100%;\n          line-height: 3rem;\n          padding: 0 2rem;\n          .beginDate {\n            width: 10rem;\n          }\n          .endDate {\n            width: 10rem;\n            line-height: 3rem;\n            margin-left: 1rem;\n          }\n          .slider {\n            width: 100%;\n          }\n        }\n      }\n      &:after {\n        content: \"\";\n        display: block;\n        clear: both;\n      }\n      .bc-left-right {\n        overflow: auto;\n        position: relative;\n        height: 100%;\n        width: 18rem;\n        float: right;\n        z-index: 100;\n        background: rgba(71, 90, 109, 1);\n        opacity: 0.8;\n        .search {\n          margin: 0.5rem 0.5rem;\n        }\n        .parameter {\n          background: rgba(71, 90, 109, 0.75);\n          margin: 0rem 0.3rem;\n          margin-top: 0.5rem;\n          // overflow-y: scroll;\n          // overflow-x: scroll;\n          overflow: auto;\n          .index {\n            width: 100%;\n            margin-bottom: 1rem;\n            .index-top {\n              height: 2rem;\n              line-height: 2rem;\n              vertical-align: middle;\n              background: #3a404e;\n              .left {\n                padding-left: 0.5rem;\n              }\n              .right {\n                float: right;\n                margin-right: 1rem;\n              }\n            }\n            .index-content {\n              font-size: 14px;\n              padding: 1rem;\n              background: #242c3b;\n              span {\n                font-size: 16px;\n                font-weight: 600;\n                color: #ffc000;\n                margin: 0 0.2rem;\n              }\n            }\n          }\n        }\n      }\n      .bc-left-left {\n        overflow: auto;\n        position: relative;\n        height: 100%;\n        width: 18rem;\n        float: left;\n        z-index: 100;\n        background: rgba(71, 90, 109, 1);\n        opacity: 0.8;\n        .indicators-list {\n          height: 100%;\n          width: 18rem;\n          background: rgba(16, 41, 67, 0.9);\n          float: left;\n          opacity: 0.9;\n          overflow: scroll;\n          -webkit-overflow-scrolling: touch;\n          .index-title {\n            height: 3rem;\n            width: 100%;\n            cursor: pointer;\n            display: flex;\n            font-size: 14px;\n            justify-content: center;\n            align-items: center;\n          }\n          .index-content {\n            width: 100%;\n            padding-bottom: 0.5rem;\n            margin: 0.5rem 0;\n            // padding-right: 10rem;\n            // margin: 0 0.5rem 0.5rem;\n            // background: rgba(16, 41, 67, 1);\n            .isEqBackground {\n              background: #102943 !important;\n            }\n            .content {\n              padding: 0.3rem 0.5rem;\n              background: rgba(62, 83, 101, 0.9);\n              border-radius: 5px;\n              display: flex;\n              align-items: center;\n              justify-content: space-between;\n              &:after {\n                content: \"\";\n                display: block;\n                clear: both;\n                visibility: hidden;\n              }\n\n              .content-left {\n                flex-grow: 1;\n                display: flex;\n                align-items: center;\n                // justify-content: space-between;\n                justify-items: center;\n                cursor: pointer;\n                .ranking-number {\n                  width: 18px;\n                  height: 18px;\n                  background: rgba(124, 181, 225, 1);\n                  border-radius: 5px;\n                  text-align: center;\n                  line-height: 18px;\n                }\n                .trends {\n                  margin-left: 0.5rem;\n                  color: #ffc000;\n                }\n                .name {\n                  text-align: center;\n                  vertical-align: middle;\n                  font-weight: bold;\n                  margin-left: 0.5rem;\n                }\n              }\n              .content-right {\n                // flex-grow: 1;\n                // font-size: 16px;\n                color: #ffff;\n                text-align: right;\n                margin-right: 0.5rem;\n                // margin-top: -0.3rem;\n              }\n            }\n            .isSelectedSecond {\n              box-shadow: 0px 0px 5px 2px #236ca6;\n            }\n            .system {\n              width: 90%;\n              margin: 0.5rem 0.5rem;\n              padding: 0.3rem 0.5rem;\n              background-color: rgba(62, 83, 101, 0.3);\n              &:after {\n                content: \"\";\n                display: block;\n                clear: both;\n              }\n              .content-left {\n                cursor: pointer;\n                float: left;\n                margin-right: 0.2rem;\n              }\n              .content-right {\n                float: right;\n                margin-right: 0.5rem;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  .broken-line {\n    height: 10rem;\n    width: calc(100vw - 36rem);\n    position: absolute;\n    left: 50%;\n    bottom: 12%;\n    -webkit-transform: translate(-50%, 0%);\n    -moz-transform: translate(-50%, 0%);\n    transform: translate(-50%, 0%);\n    float: left;\n    z-index: 90;\n    .isSelected {\n      color: #28a8e0;\n    }\n    .line-title {\n      height: 2rem;\n      line-height: 2rem;\n      vertical-align: middle;\n      margin-bottom: 1rem;\n      background: rgba(16, 41, 67, 0.8);\n      border: 1px solid rgba(147, 147, 147, 0.8);\n      border-radius: 8px 8px 0px 0px;\n      margin: 0 0.5rem;\n      .title-left {\n        cursor: pointer;\n        margin-left: 1rem;\n        font-size: 1rem;\n      }\n      .title-nowtime {\n        margin-left: 2rem;\n      }\n      .title-right {\n        float: right;\n        margin-right: 1rem;\n      }\n    }\n    .line-echarts {\n      height: 14rem;\n      margin: 0 0.5rem;\n      background: rgba(16, 41, 67, 0.8);\n      border: 1px solid rgba(147, 147, 147, 0.8);\n      border-top: none;\n    }\n  }\n}\n</style>\n<style lang=\"scss\">\n.basisGrid {\n  .ivu-input {\n    background: rgba(16, 41, 67, 0.75);\n    border: 1px solid rgba(147, 147, 147, 0.75);\n  }\n  .slider {\n    .ivu-slider {\n      .ivu-slider-wrap {\n        width: 100%;\n        height: 4px;\n        margin: 16px 0;\n        background-color: #e2f0ff;\n        border-radius: 3px;\n        vertical-align: middle;\n        position: relative;\n        cursor: pointer;\n      }\n      // 拖动覆盖进度条\n      .ivu-slider-bar {\n        height: 4px;\n        background: linear-gradient(to right, #82ace8, #55c0ee);\n        border-radius: 3px;\n        position: absolute;\n      }\n      // 拖动按钮\n      .ivu-slider-button-wrap {\n        width: 18px;\n        height: 18px;\n        text-align: center;\n        background-color: transparent;\n        position: absolute;\n        top: -5px;\n        transform: translateX(-50%);\n        .ivu-slider-button {\n          width: 12px;\n          height: 12px;\n          border: 4px solid #83ade9;\n          border-radius: 50%;\n          background-color: #fff;\n          transition: all 0.2s linear;\n          outline: 0;\n        }\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}